
dht11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004224  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080043c4  080043c4  000143c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800441c  0800441c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800441c  0800441c  0001441c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004424  08004424  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004428  08004428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800442c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000068  08004494  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08004494  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dea7  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021e0  00000000  00000000  0002df82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  00030168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3f  00000000  00000000  00030e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017582  00000000  00000000  000318d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f8e1  00000000  00000000  00048e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fea5  00000000  00000000  0005873a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e4c  00000000  00000000  000e85e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000ec42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080043ac 	.word	0x080043ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080043ac 	.word	0x080043ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <delay_us>:
int Temperature;
int Humidity;

extern TIM_HandleTypeDef htim1;

void delay_us(int time) {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	htim1.Instance->CNT = 0;
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <delay_us+0x2c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2200      	movs	r2, #0
 800058a:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim1.Instance->CNT < time);
 800058c:	bf00      	nop
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <delay_us+0x2c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	429a      	cmp	r2, r3
 8000598:	d3f9      	bcc.n	800058e <delay_us+0x12>
}
 800059a:	bf00      	nop
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	2000008c 	.word	0x2000008c

080005ac <wait_pulse>:
//----- 펄스 대기 함수
int wait_pulse(int state) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_SET_COUNTER(&htim1, 0);
	htim1.Instance->CNT = 0;
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <wait_pulse+0x40>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) != state){
 80005bc:	e006      	b.n	80005cc <wait_pulse+0x20>
		//if(__HAL_TIM_GET_COUNTER(&htim1) >= 100){
		if(htim1.Instance->CNT >= 100){
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <wait_pulse+0x40>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c4:	2b63      	cmp	r3, #99	; 0x63
 80005c6:	d901      	bls.n	80005cc <wait_pulse+0x20>
			return 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	e00a      	b.n	80005e2 <wait_pulse+0x36>
	while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) != state){
 80005cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <wait_pulse+0x44>)
 80005d2:	f000 ffcd 	bl	8001570 <HAL_GPIO_ReadPin>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4293      	cmp	r3, r2
 80005de:	d1ee      	bne.n	80005be <wait_pulse+0x12>
		}
	}
	return 1;
 80005e0:	2301      	movs	r3, #1
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	2000008c 	.word	0x2000008c
 80005f0:	40020000 	.word	0x40020000

080005f4 <dht11_read>:
int dht11_read(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
//----- Start Signal 전송
// 포트를 출력으로 설정
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005fa:	f107 0308 	add.w	r3, r7, #8
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = DHT11_Pin;
 800060a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800060e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	2301      	movs	r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	4619      	mov	r1, r3
 800061e:	485d      	ldr	r0, [pc, #372]	; (8000794 <dht11_read+0x1a0>)
 8000620:	f000 fe22 	bl	8001268 <HAL_GPIO_Init>
// Low 18ms, High 20us 펄스 생성
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062a:	485a      	ldr	r0, [pc, #360]	; (8000794 <dht11_read+0x1a0>)
 800062c:	f000 ffb8 	bl	80015a0 <HAL_GPIO_WritePin>
	delay_us(18000);
 8000630:	f244 6050 	movw	r0, #18000	; 0x4650
 8000634:	f7ff ffa2 	bl	800057c <delay_us>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063e:	4855      	ldr	r0, [pc, #340]	; (8000794 <dht11_read+0x1a0>)
 8000640:	f000 ffae 	bl	80015a0 <HAL_GPIO_WritePin>
	delay_us(20);
 8000644:	2014      	movs	r0, #20
 8000646:	f7ff ff99 	bl	800057c <delay_us>
// 포트를 입력으로 설정
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	4619      	mov	r1, r3
 8000658:	484e      	ldr	r0, [pc, #312]	; (8000794 <dht11_read+0x1a0>)
 800065a:	f000 fe05 	bl	8001268 <HAL_GPIO_Init>
//----- DHT11 응답 확인
	delay_us(40); // 40us 대기
 800065e:	2028      	movs	r0, #40	; 0x28
 8000660:	f7ff ff8c 	bl	800057c <delay_us>
	if(!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))){ // DHT11 응답 체크(Low)
 8000664:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000668:	484a      	ldr	r0, [pc, #296]	; (8000794 <dht11_read+0x1a0>)
 800066a:	f000 ff81 	bl	8001570 <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d10d      	bne.n	8000690 <dht11_read+0x9c>
		delay_us(80);
 8000674:	2050      	movs	r0, #80	; 0x50
 8000676:	f7ff ff81 	bl	800057c <delay_us>
		if(!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))) // 80us뒤 DHT11 High 응답 없으면 timeout으로 간주
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	4845      	ldr	r0, [pc, #276]	; (8000794 <dht11_read+0x1a0>)
 8000680:	f000 ff76 	bl	8001570 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d102      	bne.n	8000690 <dht11_read+0x9c>
			return -1;
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	e07c      	b.n	800078a <dht11_read+0x196>
	}
	if(wait_pulse(GPIO_PIN_RESET) == 0) // 데이터 전송 시작 대기
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ff8b 	bl	80005ac <wait_pulse>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d102      	bne.n	80006a2 <dht11_read+0xae>
		return -1; // timeout
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	e073      	b.n	800078a <dht11_read+0x196>
//----- DHT11 데이터 읽기
	uint8_t out[5], i, j;
	for(i = 0; i < 5; i++){ // 습도 정수자리, 습도 소수자리, 온도 정수자리, 온도 소수자리, 체크섬 순으로 읽음
 80006a2:	2300      	movs	r3, #0
 80006a4:	77fb      	strb	r3, [r7, #31]
 80006a6:	e055      	b.n	8000754 <dht11_read+0x160>
		for(j = 0; j < 8; j++){ // 하나의 데이터는 8비트로 구성되며, 최상위 비트부터 하나씩 읽기 시작함
 80006a8:	2300      	movs	r3, #0
 80006aa:	77bb      	strb	r3, [r7, #30]
 80006ac:	e04c      	b.n	8000748 <dht11_read+0x154>
			if(!wait_pulse(GPIO_PIN_SET)) // 데이터 전송 시작까지 대기
 80006ae:	2001      	movs	r0, #1
 80006b0:	f7ff ff7c 	bl	80005ac <wait_pulse>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d102      	bne.n	80006c0 <dht11_read+0xcc>
				return -1;
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	e064      	b.n	800078a <dht11_read+0x196>
			delay_us(40); // 40us 대기 후 High상태이면 1, Low상태이면 0 수신
 80006c0:	2028      	movs	r0, #40	; 0x28
 80006c2:	f7ff ff5b 	bl	800057c <delay_us>
			if(!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))) // Low일 경우 0
 80006c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ca:	4832      	ldr	r0, [pc, #200]	; (8000794 <dht11_read+0x1a0>)
 80006cc:	f000 ff50 	bl	8001570 <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d117      	bne.n	8000706 <dht11_read+0x112>
				out[i] &= ~(1 << (7 - j));
 80006d6:	7ffb      	ldrb	r3, [r7, #31]
 80006d8:	3320      	adds	r3, #32
 80006da:	443b      	add	r3, r7
 80006dc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80006e0:	b25a      	sxtb	r2, r3
 80006e2:	7fbb      	ldrb	r3, [r7, #30]
 80006e4:	f1c3 0307 	rsb	r3, r3, #7
 80006e8:	2101      	movs	r1, #1
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	43db      	mvns	r3, r3
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	4013      	ands	r3, r2
 80006f6:	b25a      	sxtb	r2, r3
 80006f8:	7ffb      	ldrb	r3, [r7, #31]
 80006fa:	b2d2      	uxtb	r2, r2
 80006fc:	3320      	adds	r3, #32
 80006fe:	443b      	add	r3, r7
 8000700:	f803 2c20 	strb.w	r2, [r3, #-32]
 8000704:	e014      	b.n	8000730 <dht11_read+0x13c>
			else
				// High일 경우 1
				out[i] |= (1 << (7 - j));
 8000706:	7ffb      	ldrb	r3, [r7, #31]
 8000708:	3320      	adds	r3, #32
 800070a:	443b      	add	r3, r7
 800070c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000710:	b25a      	sxtb	r2, r3
 8000712:	7fbb      	ldrb	r3, [r7, #30]
 8000714:	f1c3 0307 	rsb	r3, r3, #7
 8000718:	2101      	movs	r1, #1
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	b25b      	sxtb	r3, r3
 8000720:	4313      	orrs	r3, r2
 8000722:	b25a      	sxtb	r2, r3
 8000724:	7ffb      	ldrb	r3, [r7, #31]
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	3320      	adds	r3, #32
 800072a:	443b      	add	r3, r7
 800072c:	f803 2c20 	strb.w	r2, [r3, #-32]
			if(!wait_pulse(GPIO_PIN_RESET)) // 다음 데이터 전송 시작까지 대기
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff ff3b 	bl	80005ac <wait_pulse>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d102      	bne.n	8000742 <dht11_read+0x14e>
				return -1;
 800073c:	f04f 33ff 	mov.w	r3, #4294967295
 8000740:	e023      	b.n	800078a <dht11_read+0x196>
		for(j = 0; j < 8; j++){ // 하나의 데이터는 8비트로 구성되며, 최상위 비트부터 하나씩 읽기 시작함
 8000742:	7fbb      	ldrb	r3, [r7, #30]
 8000744:	3301      	adds	r3, #1
 8000746:	77bb      	strb	r3, [r7, #30]
 8000748:	7fbb      	ldrb	r3, [r7, #30]
 800074a:	2b07      	cmp	r3, #7
 800074c:	d9af      	bls.n	80006ae <dht11_read+0xba>
	for(i = 0; i < 5; i++){ // 습도 정수자리, 습도 소수자리, 온도 정수자리, 온도 소수자리, 체크섬 순으로 읽음
 800074e:	7ffb      	ldrb	r3, [r7, #31]
 8000750:	3301      	adds	r3, #1
 8000752:	77fb      	strb	r3, [r7, #31]
 8000754:	7ffb      	ldrb	r3, [r7, #31]
 8000756:	2b04      	cmp	r3, #4
 8000758:	d9a6      	bls.n	80006a8 <dht11_read+0xb4>
		}
	}
//----- 체크섬 판별
	if(out[4] != (out[0] + out[1] + out[2] + out[3]))
 800075a:	793b      	ldrb	r3, [r7, #4]
 800075c:	461a      	mov	r2, r3
 800075e:	783b      	ldrb	r3, [r7, #0]
 8000760:	4619      	mov	r1, r3
 8000762:	787b      	ldrb	r3, [r7, #1]
 8000764:	440b      	add	r3, r1
 8000766:	78b9      	ldrb	r1, [r7, #2]
 8000768:	440b      	add	r3, r1
 800076a:	78f9      	ldrb	r1, [r7, #3]
 800076c:	440b      	add	r3, r1
 800076e:	429a      	cmp	r2, r3
 8000770:	d002      	beq.n	8000778 <dht11_read+0x184>
		return -2;
 8000772:	f06f 0301 	mvn.w	r3, #1
 8000776:	e008      	b.n	800078a <dht11_read+0x196>
//----- 필요 데이터 분리
	Temperature = out[2];
 8000778:	78bb      	ldrb	r3, [r7, #2]
 800077a:	461a      	mov	r2, r3
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <dht11_read+0x1a4>)
 800077e:	601a      	str	r2, [r3, #0]
	Humidity = out[0];
 8000780:	783b      	ldrb	r3, [r7, #0]
 8000782:	461a      	mov	r2, r3
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <dht11_read+0x1a8>)
 8000786:	601a      	str	r2, [r3, #0]
	return 1;
 8000788:	2301      	movs	r3, #1
}
 800078a:	4618      	mov	r0, r3
 800078c:	3720      	adds	r7, #32
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40020000 	.word	0x40020000
 8000798:	20000084 	.word	0x20000084
 800079c:	20000088 	.word	0x20000088

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a4:	f000 fb26 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a8:	f000 f826 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ac:	f000 f8fc 	bl	80009a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007b0:	f000 f8d0 	bl	8000954 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80007b4:	f000 f87e 	bl	80008b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  initUart(&huart2);
 80007b8:	480a      	ldr	r0, [pc, #40]	; (80007e4 <main+0x44>)
 80007ba:	f000 fa97 	bl	8000cec <initUart>
  HAL_TIM_Base_Start(&htim1);
 80007be:	480a      	ldr	r0, [pc, #40]	; (80007e8 <main+0x48>)
 80007c0:	f001 fbb0 	bl	8001f24 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	dht11_read();
 80007c4:	f7ff ff16 	bl	80005f4 <dht11_read>
  	printf("T=%d, H=%d\n",Temperature,Humidity);
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <main+0x4c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <main+0x50>)
 80007ce:	6812      	ldr	r2, [r2, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <main+0x54>)
 80007d4:	f002 ff74 	bl	80036c0 <iprintf>
  	HAL_Delay(1000);
 80007d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007dc:	f000 fb7c 	bl	8000ed8 <HAL_Delay>
  {
 80007e0:	e7f0      	b.n	80007c4 <main+0x24>
 80007e2:	bf00      	nop
 80007e4:	200000d4 	.word	0x200000d4
 80007e8:	2000008c 	.word	0x2000008c
 80007ec:	20000084 	.word	0x20000084
 80007f0:	20000088 	.word	0x20000088
 80007f4:	080043c4 	.word	0x080043c4

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b094      	sub	sp, #80	; 0x50
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0320 	add.w	r3, r7, #32
 8000802:	2230      	movs	r2, #48	; 0x30
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f002 ffaf 	bl	800376a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <SystemClock_Config+0xb4>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	4a21      	ldr	r2, [pc, #132]	; (80008ac <SystemClock_Config+0xb4>)
 8000826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082a:	6413      	str	r3, [r2, #64]	; 0x40
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <SystemClock_Config+0xb4>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <SystemClock_Config+0xb8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <SystemClock_Config+0xb8>)
 8000842:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <SystemClock_Config+0xb8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000854:	2302      	movs	r3, #2
 8000856:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000858:	2301      	movs	r3, #1
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085c:	2310      	movs	r3, #16
 800085e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000860:	2300      	movs	r3, #0
 8000862:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000864:	f107 0320 	add.w	r3, r7, #32
 8000868:	4618      	mov	r0, r3
 800086a:	f000 feb3 	bl	80015d4 <HAL_RCC_OscConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000874:	f000 f8cc 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000878:	230f      	movs	r3, #15
 800087a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f001 f916 	bl	8001ac4 <HAL_RCC_ClockConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800089e:	f000 f8b7 	bl	8000a10 <Error_Handler>
  }
}
 80008a2:	bf00      	nop
 80008a4:	3750      	adds	r7, #80	; 0x50
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000

080008b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	463b      	mov	r3, r7
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <MX_TIM1_Init+0x98>)
 80008d2:	4a1f      	ldr	r2, [pc, #124]	; (8000950 <MX_TIM1_Init+0x9c>)
 80008d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_TIM1_Init+0x98>)
 80008d8:	220f      	movs	r2, #15
 80008da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MX_TIM1_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_TIM1_Init+0x98>)
 80008e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_TIM1_Init+0x98>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_TIM1_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_TIM1_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008fc:	4813      	ldr	r0, [pc, #76]	; (800094c <MX_TIM1_Init+0x98>)
 80008fe:	f001 fac1 	bl	8001e84 <HAL_TIM_Base_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000908:	f000 f882 	bl	8000a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000910:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	4619      	mov	r1, r3
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <MX_TIM1_Init+0x98>)
 800091a:	f001 fb5d 	bl	8001fd8 <HAL_TIM_ConfigClockSource>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000924:	f000 f874 	bl	8000a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_TIM1_Init+0x98>)
 8000936:	f001 fd3d 	bl	80023b4 <HAL_TIMEx_MasterConfigSynchronization>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000940:	f000 f866 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2000008c 	.word	0x2000008c
 8000950:	40010000 	.word	0x40010000

08000954 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <MX_USART2_UART_Init+0x50>)
 800095c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800098c:	f001 fd80 	bl	8002490 <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000996:	f000 f83b 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200000d4 	.word	0x200000d4
 80009a4:	40004400 	.word	0x40004400

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_GPIO_Init+0x60>)
 80009c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c4:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <MX_GPIO_Init+0x60>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	6313      	str	r3, [r2, #48]	; 0x30
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_GPIO_Init+0x60>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009de:	480b      	ldr	r0, [pc, #44]	; (8000a0c <MX_GPIO_Init+0x64>)
 80009e0:	f000 fdde 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80009e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4619      	mov	r1, r3
 80009fa:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_GPIO_Init+0x64>)
 80009fc:	f000 fc34 	bl	8001268 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a00:	bf00      	nop
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020000 	.word	0x40020000

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	; 0x44
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <HAL_TIM_Base_MspInit+0x3c>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d10d      	bne.n	8000a9a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_TIM_Base_MspInit+0x40>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a09      	ldr	r2, [pc, #36]	; (8000aac <HAL_TIM_Base_MspInit+0x40>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <HAL_TIM_Base_MspInit+0x40>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40010000 	.word	0x40010000
 8000aac:	40023800 	.word	0x40023800

08000ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <HAL_UART_MspInit+0x94>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d133      	bne.n	8000b3a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <HAL_UART_MspInit+0x98>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <HAL_UART_MspInit+0x98>)
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_UART_MspInit+0x98>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_UART_MspInit+0x98>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <HAL_UART_MspInit+0x98>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_UART_MspInit+0x98>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	4809      	ldr	r0, [pc, #36]	; (8000b4c <HAL_UART_MspInit+0x9c>)
 8000b26:	f000 fb9f 	bl	8001268 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2026      	movs	r0, #38	; 0x26
 8000b30:	f000 fad1 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b34:	2026      	movs	r0, #38	; 0x26
 8000b36:	f000 faea 	bl	800110e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40004400 	.word	0x40004400
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 f97c 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <USART2_IRQHandler+0x10>)
 8000baa:	f001 fd71 	bl	8002690 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000d4 	.word	0x200000d4

08000bb8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	e00a      	b.n	8000be0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bca:	f3af 8000 	nop.w
 8000bce:	4601      	mov	r1, r0
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	60ba      	str	r2, [r7, #8]
 8000bd6:	b2ca      	uxtb	r2, r1
 8000bd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dbf0      	blt.n	8000bca <_read+0x12>
  }

  return len;
 8000be8:	687b      	ldr	r3, [r7, #4]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <_isatty>:

int _isatty(int file)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c64:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <_sbrk+0x5c>)
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <_sbrk+0x60>)
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d102      	bne.n	8000c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <_sbrk+0x64>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <_sbrk+0x68>)
 8000c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d207      	bcs.n	8000c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c8c:	f002 fdbc 	bl	8003808 <__errno>
 8000c90:	4603      	mov	r3, r0
 8000c92:	220c      	movs	r2, #12
 8000c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	e009      	b.n	8000cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <_sbrk+0x64>)
 8000cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20020000 	.word	0x20020000
 8000cbc:	00000400 	.word	0x00000400
 8000cc0:	2000011c 	.word	0x2000011c
 8000cc4:	20000378 	.word	0x20000378

08000cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <SystemInit+0x20>)
 8000cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <SystemInit+0x20>)
 8000cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <initUart>:
int rxBufferPp;					// put pointer (write)
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;

// uart device reset (uart   jang chi   cho gi hwa)
void initUart(UART_HandleTypeDef *inHuart) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	huart= inHuart;
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <initUart+0x24>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(huart, &rxChar, 1);
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <initUart+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4904      	ldr	r1, [pc, #16]	; (8000d14 <initUart+0x28>)
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 fc9f 	bl	8002646 <HAL_UART_Receive_IT>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000120 	.word	0x20000120
 8000d14:	20000227 	.word	0x20000227

08000d18 <HAL_UART_RxCpltCallback>:

// message recieve process(mun ja   chu ri   gwa jung)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferPp++] = rxChar;
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_UART_RxCpltCallback+0x4c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	490f      	ldr	r1, [pc, #60]	; (8000d64 <HAL_UART_RxCpltCallback+0x4c>)
 8000d28:	600a      	str	r2, [r1, #0]
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_UART_RxCpltCallback+0x50>)
 8000d2c:	7811      	ldrb	r1, [r2, #0]
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <HAL_UART_RxCpltCallback+0x54>)
 8000d30:	54d1      	strb	r1, [r2, r3]
	rxBufferPp %= rxBufferMax;
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_UART_RxCpltCallback+0x4c>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_UART_RxCpltCallback+0x58>)
 8000d38:	fb83 1302 	smull	r1, r3, r3, r2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	11d9      	asrs	r1, r3, #7
 8000d40:	17d3      	asrs	r3, r2, #31
 8000d42:	1ac9      	subs	r1, r1, r3
 8000d44:	460b      	mov	r3, r1
 8000d46:	021b      	lsls	r3, r3, #8
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	1ad1      	subs	r1, r2, r3
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <HAL_UART_RxCpltCallback+0x4c>)
 8000d4e:	6019      	str	r1, [r3, #0]
	HAL_UART_Receive_IT(huart, &rxChar, 1);//interrupt always reset
 8000d50:	2201      	movs	r2, #1
 8000d52:	4905      	ldr	r1, [pc, #20]	; (8000d68 <HAL_UART_RxCpltCallback+0x50>)
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f001 fc76 	bl	8002646 <HAL_UART_Receive_IT>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000124 	.word	0x20000124
 8000d68:	20000227 	.word	0x20000227
 8000d6c:	20000128 	.word	0x20000128
 8000d70:	80808081 	.word	0x80808081

08000d74 <_write>:
	result = rxBuffer[rxBufferGp++];
	rxBufferGp %= rxBufferMax;
	return result;
}

int _write(int file, char *p, int len) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(huart, p, len, 1);
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <_write+0x28>)
 8000d82:	6818      	ldr	r0, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	2301      	movs	r3, #1
 8000d8a:	68b9      	ldr	r1, [r7, #8]
 8000d8c:	f001 fbd0 	bl	8002530 <HAL_UART_Transmit>
	return len;
 8000d90:	687b      	ldr	r3, [r7, #4]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000120 	.word	0x20000120

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000da4:	f7ff ff90 	bl	8000cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	; (8000de0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	; (8000dec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f002 fd21 	bl	8003814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fce5 	bl	80007a0 <main>
  bx  lr    
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000de4:	0800442c 	.word	0x0800442c
  ldr r2, =_sbss
 8000de8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000dec:	20000378 	.word	0x20000378

08000df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <HAL_Init+0x40>)
 8000dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_Init+0x40>)
 8000e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <HAL_Init+0x40>)
 8000e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 f94f 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e22:	200f      	movs	r0, #15
 8000e24:	f000 f808 	bl	8000e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e28:	f7ff fdf8 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023c00 	.word	0x40023c00

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_InitTick+0x54>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x58>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f967 	bl	800112a <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00e      	b.n	8000e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d80a      	bhi.n	8000e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f000 f92f 	bl	80010d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e78:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <HAL_InitTick+0x5c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000228 	.word	0x20000228

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000228 	.word	0x20000228

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	db0b      	blt.n	8000fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	4907      	ldr	r1, [pc, #28]	; (8000fbc <__NVIC_EnableIRQ+0x38>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f7ff ff8e 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff29 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e8:	f7ff ff3e 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ff8e 	bl	8001014 <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff5d 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff31 	bl	8000f84 <__NVIC_EnableIRQ>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffa2 	bl	800107c <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff feb6 	bl	8000ec0 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d008      	beq.n	8001174 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e052      	b.n	800121a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0216 	bic.w	r2, r2, #22
 8001182:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	695a      	ldr	r2, [r3, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001192:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	2b00      	cmp	r3, #0
 800119a:	d103      	bne.n	80011a4 <HAL_DMA_Abort+0x62>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d007      	beq.n	80011b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0208 	bic.w	r2, r2, #8
 80011b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0201 	bic.w	r2, r2, #1
 80011c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c4:	e013      	b.n	80011ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011c6:	f7ff fe7b 	bl	8000ec0 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b05      	cmp	r3, #5
 80011d2:	d90c      	bls.n	80011ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2220      	movs	r2, #32
 80011d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2203      	movs	r2, #3
 80011de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e015      	b.n	800121a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1e4      	bne.n	80011c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001200:	223f      	movs	r2, #63	; 0x3f
 8001202:	409a      	lsls	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d004      	beq.n	8001240 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2280      	movs	r2, #128	; 0x80
 800123a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e00c      	b.n	800125a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2205      	movs	r2, #5
 8001244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0201 	bic.w	r2, r2, #1
 8001256:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
 8001282:	e159      	b.n	8001538 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001284:	2201      	movs	r2, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	429a      	cmp	r2, r3
 800129e:	f040 8148 	bne.w	8001532 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d005      	beq.n	80012ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d130      	bne.n	800131c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f0:	2201      	movs	r2, #1
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	f003 0201 	and.w	r2, r3, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b03      	cmp	r3, #3
 8001326:	d017      	beq.n	8001358 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d123      	bne.n	80013ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	08da      	lsrs	r2, r3, #3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3208      	adds	r2, #8
 800136c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	220f      	movs	r2, #15
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	08da      	lsrs	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3208      	adds	r2, #8
 80013a6:	69b9      	ldr	r1, [r7, #24]
 80013a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0203 	and.w	r2, r3, #3
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 80a2 	beq.w	8001532 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b57      	ldr	r3, [pc, #348]	; (8001550 <HAL_GPIO_Init+0x2e8>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a56      	ldr	r2, [pc, #344]	; (8001550 <HAL_GPIO_Init+0x2e8>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b54      	ldr	r3, [pc, #336]	; (8001550 <HAL_GPIO_Init+0x2e8>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140a:	4a52      	ldr	r2, [pc, #328]	; (8001554 <HAL_GPIO_Init+0x2ec>)
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	3302      	adds	r3, #2
 8001412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	220f      	movs	r2, #15
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a49      	ldr	r2, [pc, #292]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d019      	beq.n	800146a <HAL_GPIO_Init+0x202>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a48      	ldr	r2, [pc, #288]	; (800155c <HAL_GPIO_Init+0x2f4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d013      	beq.n	8001466 <HAL_GPIO_Init+0x1fe>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a47      	ldr	r2, [pc, #284]	; (8001560 <HAL_GPIO_Init+0x2f8>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00d      	beq.n	8001462 <HAL_GPIO_Init+0x1fa>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a46      	ldr	r2, [pc, #280]	; (8001564 <HAL_GPIO_Init+0x2fc>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d007      	beq.n	800145e <HAL_GPIO_Init+0x1f6>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a45      	ldr	r2, [pc, #276]	; (8001568 <HAL_GPIO_Init+0x300>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d101      	bne.n	800145a <HAL_GPIO_Init+0x1f2>
 8001456:	2304      	movs	r3, #4
 8001458:	e008      	b.n	800146c <HAL_GPIO_Init+0x204>
 800145a:	2307      	movs	r3, #7
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x204>
 800145e:	2303      	movs	r3, #3
 8001460:	e004      	b.n	800146c <HAL_GPIO_Init+0x204>
 8001462:	2302      	movs	r3, #2
 8001464:	e002      	b.n	800146c <HAL_GPIO_Init+0x204>
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <HAL_GPIO_Init+0x204>
 800146a:	2300      	movs	r3, #0
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	f002 0203 	and.w	r2, r2, #3
 8001472:	0092      	lsls	r2, r2, #2
 8001474:	4093      	lsls	r3, r2
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800147c:	4935      	ldr	r1, [pc, #212]	; (8001554 <HAL_GPIO_Init+0x2ec>)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	3302      	adds	r3, #2
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148a:	4b38      	ldr	r3, [pc, #224]	; (800156c <HAL_GPIO_Init+0x304>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ae:	4a2f      	ldr	r2, [pc, #188]	; (800156c <HAL_GPIO_Init+0x304>)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b4:	4b2d      	ldr	r3, [pc, #180]	; (800156c <HAL_GPIO_Init+0x304>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d8:	4a24      	ldr	r2, [pc, #144]	; (800156c <HAL_GPIO_Init+0x304>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014de:	4b23      	ldr	r3, [pc, #140]	; (800156c <HAL_GPIO_Init+0x304>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001502:	4a1a      	ldr	r2, [pc, #104]	; (800156c <HAL_GPIO_Init+0x304>)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <HAL_GPIO_Init+0x304>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800152c:	4a0f      	ldr	r2, [pc, #60]	; (800156c <HAL_GPIO_Init+0x304>)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3301      	adds	r3, #1
 8001536:	61fb      	str	r3, [r7, #28]
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	2b0f      	cmp	r3, #15
 800153c:	f67f aea2 	bls.w	8001284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	40013800 	.word	0x40013800
 8001558:	40020000 	.word	0x40020000
 800155c:	40020400 	.word	0x40020400
 8001560:	40020800 	.word	0x40020800
 8001564:	40020c00 	.word	0x40020c00
 8001568:	40021000 	.word	0x40021000
 800156c:	40013c00 	.word	0x40013c00

08001570 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	4013      	ands	r3, r2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001588:	2301      	movs	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	e001      	b.n	8001592 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
 80015ac:	4613      	mov	r3, r2
 80015ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b0:	787b      	ldrb	r3, [r7, #1]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015bc:	e003      	b.n	80015c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015be:	887b      	ldrh	r3, [r7, #2]
 80015c0:	041a      	lsls	r2, r3, #16
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	619a      	str	r2, [r3, #24]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e267      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d075      	beq.n	80016de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015f2:	4b88      	ldr	r3, [pc, #544]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d00c      	beq.n	8001618 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015fe:	4b85      	ldr	r3, [pc, #532]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001606:	2b08      	cmp	r3, #8
 8001608:	d112      	bne.n	8001630 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160a:	4b82      	ldr	r3, [pc, #520]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001616:	d10b      	bne.n	8001630 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	4b7e      	ldr	r3, [pc, #504]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d05b      	beq.n	80016dc <HAL_RCC_OscConfig+0x108>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d157      	bne.n	80016dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e242      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001638:	d106      	bne.n	8001648 <HAL_RCC_OscConfig+0x74>
 800163a:	4b76      	ldr	r3, [pc, #472]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a75      	ldr	r2, [pc, #468]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e01d      	b.n	8001684 <HAL_RCC_OscConfig+0xb0>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0x98>
 8001652:	4b70      	ldr	r3, [pc, #448]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a6f      	ldr	r2, [pc, #444]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b6d      	ldr	r3, [pc, #436]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a6c      	ldr	r2, [pc, #432]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e00b      	b.n	8001684 <HAL_RCC_OscConfig+0xb0>
 800166c:	4b69      	ldr	r3, [pc, #420]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a68      	ldr	r2, [pc, #416]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b66      	ldr	r3, [pc, #408]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a65      	ldr	r2, [pc, #404]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 800167e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fc18 	bl	8000ec0 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fc14 	bl	8000ec0 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e207      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	4b5b      	ldr	r3, [pc, #364]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0xc0>
 80016b2:	e014      	b.n	80016de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fc04 	bl	8000ec0 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff fc00 	bl	8000ec0 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e1f3      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ce:	4b51      	ldr	r3, [pc, #324]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0xe8>
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d063      	beq.n	80017b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ea:	4b4a      	ldr	r3, [pc, #296]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00b      	beq.n	800170e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016f6:	4b47      	ldr	r3, [pc, #284]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d11c      	bne.n	800173c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001702:	4b44      	ldr	r3, [pc, #272]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d116      	bne.n	800173c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170e:	4b41      	ldr	r3, [pc, #260]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <HAL_RCC_OscConfig+0x152>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d001      	beq.n	8001726 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e1c7      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001726:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4937      	ldr	r1, [pc, #220]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173a:	e03a      	b.n	80017b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d020      	beq.n	8001786 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001744:	4b34      	ldr	r3, [pc, #208]	; (8001818 <HAL_RCC_OscConfig+0x244>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174a:	f7ff fbb9 	bl	8000ec0 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff fbb5 	bl	8000ec0 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e1a8      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001770:	4b28      	ldr	r3, [pc, #160]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4925      	ldr	r1, [pc, #148]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]
 8001784:	e015      	b.n	80017b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001786:	4b24      	ldr	r3, [pc, #144]	; (8001818 <HAL_RCC_OscConfig+0x244>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fb98 	bl	8000ec0 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001794:	f7ff fb94 	bl	8000ec0 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e187      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d036      	beq.n	800182c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d016      	beq.n	80017f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_RCC_OscConfig+0x248>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff fb78 	bl	8000ec0 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d4:	f7ff fb74 	bl	8000ec0 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e167      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 80017e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x200>
 80017f2:	e01b      	b.n	800182c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_RCC_OscConfig+0x248>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fa:	f7ff fb61 	bl	8000ec0 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001800:	e00e      	b.n	8001820 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001802:	f7ff fb5d 	bl	8000ec0 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d907      	bls.n	8001820 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e150      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
 8001814:	40023800 	.word	0x40023800
 8001818:	42470000 	.word	0x42470000
 800181c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001820:	4b88      	ldr	r3, [pc, #544]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1ea      	bne.n	8001802 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 8097 	beq.w	8001968 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183e:	4b81      	ldr	r3, [pc, #516]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10f      	bne.n	800186a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	4b7d      	ldr	r3, [pc, #500]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	4a7c      	ldr	r2, [pc, #496]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b7a      	ldr	r3, [pc, #488]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001866:	2301      	movs	r3, #1
 8001868:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186a:	4b77      	ldr	r3, [pc, #476]	; (8001a48 <HAL_RCC_OscConfig+0x474>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d118      	bne.n	80018a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001876:	4b74      	ldr	r3, [pc, #464]	; (8001a48 <HAL_RCC_OscConfig+0x474>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a73      	ldr	r2, [pc, #460]	; (8001a48 <HAL_RCC_OscConfig+0x474>)
 800187c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001882:	f7ff fb1d 	bl	8000ec0 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188a:	f7ff fb19 	bl	8000ec0 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e10c      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189c:	4b6a      	ldr	r3, [pc, #424]	; (8001a48 <HAL_RCC_OscConfig+0x474>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d106      	bne.n	80018be <HAL_RCC_OscConfig+0x2ea>
 80018b0:	4b64      	ldr	r3, [pc, #400]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b4:	4a63      	ldr	r2, [pc, #396]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6713      	str	r3, [r2, #112]	; 0x70
 80018bc:	e01c      	b.n	80018f8 <HAL_RCC_OscConfig+0x324>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x30c>
 80018c6:	4b5f      	ldr	r3, [pc, #380]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ca:	4a5e      	ldr	r2, [pc, #376]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6713      	str	r3, [r2, #112]	; 0x70
 80018d2:	4b5c      	ldr	r3, [pc, #368]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d6:	4a5b      	ldr	r2, [pc, #364]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6713      	str	r3, [r2, #112]	; 0x70
 80018de:	e00b      	b.n	80018f8 <HAL_RCC_OscConfig+0x324>
 80018e0:	4b58      	ldr	r3, [pc, #352]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e4:	4a57      	ldr	r2, [pc, #348]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	6713      	str	r3, [r2, #112]	; 0x70
 80018ec:	4b55      	ldr	r3, [pc, #340]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	4a54      	ldr	r2, [pc, #336]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018f2:	f023 0304 	bic.w	r3, r3, #4
 80018f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d015      	beq.n	800192c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001900:	f7ff fade 	bl	8000ec0 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001906:	e00a      	b.n	800191e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001908:	f7ff fada 	bl	8000ec0 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f241 3288 	movw	r2, #5000	; 0x1388
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e0cb      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191e:	4b49      	ldr	r3, [pc, #292]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0ee      	beq.n	8001908 <HAL_RCC_OscConfig+0x334>
 800192a:	e014      	b.n	8001956 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192c:	f7ff fac8 	bl	8000ec0 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001932:	e00a      	b.n	800194a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001934:	f7ff fac4 	bl	8000ec0 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e0b5      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194a:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 800194c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1ee      	bne.n	8001934 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001956:	7dfb      	ldrb	r3, [r7, #23]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195c:	4b39      	ldr	r3, [pc, #228]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	4a38      	ldr	r2, [pc, #224]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001966:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80a1 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001972:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b08      	cmp	r3, #8
 800197c:	d05c      	beq.n	8001a38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d141      	bne.n	8001a0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001986:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <HAL_RCC_OscConfig+0x478>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff fa98 	bl	8000ec0 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001994:	f7ff fa94 	bl	8000ec0 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e087      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a6:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69da      	ldr	r2, [r3, #28]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	019b      	lsls	r3, r3, #6
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	085b      	lsrs	r3, r3, #1
 80019ca:	3b01      	subs	r3, #1
 80019cc:	041b      	lsls	r3, r3, #16
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	061b      	lsls	r3, r3, #24
 80019d6:	491b      	ldr	r1, [pc, #108]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <HAL_RCC_OscConfig+0x478>)
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff fa6d 	bl	8000ec0 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ea:	f7ff fa69 	bl	8000ec0 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e05c      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x416>
 8001a08:	e054      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <HAL_RCC_OscConfig+0x478>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff fa56 	bl	8000ec0 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff fa52 	bl	8000ec0 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e045      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x444>
 8001a36:	e03d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e038      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <HAL_RCC_OscConfig+0x4ec>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d028      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d121      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d11a      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a80:	4013      	ands	r3, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d111      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800

08001ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0cc      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b68      	ldr	r3, [pc, #416]	; (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d90c      	bls.n	8001b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b65      	ldr	r3, [pc, #404]	; (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b63      	ldr	r3, [pc, #396]	; (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0b8      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d020      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b18:	4b59      	ldr	r3, [pc, #356]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a58      	ldr	r2, [pc, #352]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b30:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4a52      	ldr	r2, [pc, #328]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b3c:	4b50      	ldr	r3, [pc, #320]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	494d      	ldr	r1, [pc, #308]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d044      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d119      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e07f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d003      	beq.n	8001b82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b82:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e06f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b92:	4b3b      	ldr	r3, [pc, #236]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e067      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba2:	4b37      	ldr	r3, [pc, #220]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f023 0203 	bic.w	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4934      	ldr	r1, [pc, #208]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb4:	f7ff f984 	bl	8000ec0 <HAL_GetTick>
 8001bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bbc:	f7ff f980 	bl	8000ec0 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e04f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 020c 	and.w	r2, r3, #12
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d1eb      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d20c      	bcs.n	8001c0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e032      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	4916      	ldr	r1, [pc, #88]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	490e      	ldr	r1, [pc, #56]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c4a:	f000 f821 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	490a      	ldr	r1, [pc, #40]	; (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	5ccb      	ldrb	r3, [r1, r3]
 8001c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c62:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f8e4 	bl	8000e38 <HAL_InitTick>

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023c00 	.word	0x40023c00
 8001c80:	40023800 	.word	0x40023800
 8001c84:	080043d0 	.word	0x080043d0
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20000004 	.word	0x20000004

08001c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c94:	b090      	sub	sp, #64	; 0x40
 8001c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ca8:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	f200 80a1 	bhi.w	8001dfc <HAL_RCC_GetSysClockFreq+0x16c>
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d003      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0x3a>
 8001cc2:	e09b      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001cc8:	e09b      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cca:	4b53      	ldr	r3, [pc, #332]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ccc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cce:	e098      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd0:	4b4f      	ldr	r3, [pc, #316]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cd8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cda:	4b4d      	ldr	r3, [pc, #308]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d028      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce6:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	099b      	lsrs	r3, r3, #6
 8001cec:	2200      	movs	r2, #0
 8001cee:	623b      	str	r3, [r7, #32]
 8001cf0:	627a      	str	r2, [r7, #36]	; 0x24
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4b47      	ldr	r3, [pc, #284]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cfc:	fb03 f201 	mul.w	r2, r3, r1
 8001d00:	2300      	movs	r3, #0
 8001d02:	fb00 f303 	mul.w	r3, r0, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	4a43      	ldr	r2, [pc, #268]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d0a:	fba0 1202 	umull	r1, r2, r0, r2
 8001d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d10:	460a      	mov	r2, r1
 8001d12:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d16:	4413      	add	r3, r2
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	61fa      	str	r2, [r7, #28]
 8001d22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d2a:	f7fe faa9 	bl	8000280 <__aeabi_uldivmod>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4613      	mov	r3, r2
 8001d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d36:	e053      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d38:	4b35      	ldr	r3, [pc, #212]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	099b      	lsrs	r3, r3, #6
 8001d3e:	2200      	movs	r2, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	617a      	str	r2, [r7, #20]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d4a:	f04f 0b00 	mov.w	fp, #0
 8001d4e:	4652      	mov	r2, sl
 8001d50:	465b      	mov	r3, fp
 8001d52:	f04f 0000 	mov.w	r0, #0
 8001d56:	f04f 0100 	mov.w	r1, #0
 8001d5a:	0159      	lsls	r1, r3, #5
 8001d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d60:	0150      	lsls	r0, r2, #5
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	ebb2 080a 	subs.w	r8, r2, sl
 8001d6a:	eb63 090b 	sbc.w	r9, r3, fp
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d82:	ebb2 0408 	subs.w	r4, r2, r8
 8001d86:	eb63 0509 	sbc.w	r5, r3, r9
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	00eb      	lsls	r3, r5, #3
 8001d94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d98:	00e2      	lsls	r2, r4, #3
 8001d9a:	4614      	mov	r4, r2
 8001d9c:	461d      	mov	r5, r3
 8001d9e:	eb14 030a 	adds.w	r3, r4, sl
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	eb45 030b 	adc.w	r3, r5, fp
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001db6:	4629      	mov	r1, r5
 8001db8:	028b      	lsls	r3, r1, #10
 8001dba:	4621      	mov	r1, r4
 8001dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	028a      	lsls	r2, r1, #10
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	60fa      	str	r2, [r7, #12]
 8001dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dd4:	f7fe fa54 	bl	8000280 <__aeabi_uldivmod>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4613      	mov	r3, r2
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	0c1b      	lsrs	r3, r3, #16
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	3301      	adds	r3, #1
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001df0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dfa:	e002      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dfe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3740      	adds	r7, #64	; 0x40
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	00f42400 	.word	0x00f42400
 8001e18:	017d7840 	.word	0x017d7840

08001e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000000 	.word	0x20000000

08001e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e38:	f7ff fff0 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	0a9b      	lsrs	r3, r3, #10
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	4903      	ldr	r1, [pc, #12]	; (8001e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e4a:	5ccb      	ldrb	r3, [r1, r3]
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40023800 	.word	0x40023800
 8001e58:	080043e0 	.word	0x080043e0

08001e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e60:	f7ff ffdc 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	0b5b      	lsrs	r3, r3, #13
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	4903      	ldr	r1, [pc, #12]	; (8001e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	080043e0 	.word	0x080043e0

08001e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e041      	b.n	8001f1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d106      	bne.n	8001eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe fdde 	bl	8000a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	f000 f950 	bl	8002168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d001      	beq.n	8001f3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e03c      	b.n	8001fb6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_TIM_Base_Start+0xa0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d018      	beq.n	8001f80 <HAL_TIM_Base_Start+0x5c>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f56:	d013      	beq.n	8001f80 <HAL_TIM_Base_Start+0x5c>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1a      	ldr	r2, [pc, #104]	; (8001fc8 <HAL_TIM_Base_Start+0xa4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00e      	beq.n	8001f80 <HAL_TIM_Base_Start+0x5c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <HAL_TIM_Base_Start+0xa8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d009      	beq.n	8001f80 <HAL_TIM_Base_Start+0x5c>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a17      	ldr	r2, [pc, #92]	; (8001fd0 <HAL_TIM_Base_Start+0xac>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d004      	beq.n	8001f80 <HAL_TIM_Base_Start+0x5c>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a16      	ldr	r2, [pc, #88]	; (8001fd4 <HAL_TIM_Base_Start+0xb0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d111      	bne.n	8001fa4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d010      	beq.n	8001fb4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0201 	orr.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa2:	e007      	b.n	8001fb4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	40000400 	.word	0x40000400
 8001fcc:	40000800 	.word	0x40000800
 8001fd0:	40000c00 	.word	0x40000c00
 8001fd4:	40014000 	.word	0x40014000

08001fd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_TIM_ConfigClockSource+0x1c>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e0b4      	b.n	800215e <HAL_TIM_ConfigClockSource+0x186>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800201a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800202c:	d03e      	beq.n	80020ac <HAL_TIM_ConfigClockSource+0xd4>
 800202e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002032:	f200 8087 	bhi.w	8002144 <HAL_TIM_ConfigClockSource+0x16c>
 8002036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203a:	f000 8086 	beq.w	800214a <HAL_TIM_ConfigClockSource+0x172>
 800203e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002042:	d87f      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x16c>
 8002044:	2b70      	cmp	r3, #112	; 0x70
 8002046:	d01a      	beq.n	800207e <HAL_TIM_ConfigClockSource+0xa6>
 8002048:	2b70      	cmp	r3, #112	; 0x70
 800204a:	d87b      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x16c>
 800204c:	2b60      	cmp	r3, #96	; 0x60
 800204e:	d050      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0x11a>
 8002050:	2b60      	cmp	r3, #96	; 0x60
 8002052:	d877      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x16c>
 8002054:	2b50      	cmp	r3, #80	; 0x50
 8002056:	d03c      	beq.n	80020d2 <HAL_TIM_ConfigClockSource+0xfa>
 8002058:	2b50      	cmp	r3, #80	; 0x50
 800205a:	d873      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x16c>
 800205c:	2b40      	cmp	r3, #64	; 0x40
 800205e:	d058      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x13a>
 8002060:	2b40      	cmp	r3, #64	; 0x40
 8002062:	d86f      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x16c>
 8002064:	2b30      	cmp	r3, #48	; 0x30
 8002066:	d064      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0x15a>
 8002068:	2b30      	cmp	r3, #48	; 0x30
 800206a:	d86b      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x16c>
 800206c:	2b20      	cmp	r3, #32
 800206e:	d060      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0x15a>
 8002070:	2b20      	cmp	r3, #32
 8002072:	d867      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x16c>
 8002074:	2b00      	cmp	r3, #0
 8002076:	d05c      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0x15a>
 8002078:	2b10      	cmp	r3, #16
 800207a:	d05a      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0x15a>
 800207c:	e062      	b.n	8002144 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800208e:	f000 f971 	bl	8002374 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	609a      	str	r2, [r3, #8]
      break;
 80020aa:	e04f      	b.n	800214c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020bc:	f000 f95a 	bl	8002374 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020ce:	609a      	str	r2, [r3, #8]
      break;
 80020d0:	e03c      	b.n	800214c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020de:	461a      	mov	r2, r3
 80020e0:	f000 f8ce 	bl	8002280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2150      	movs	r1, #80	; 0x50
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f927 	bl	800233e <TIM_ITRx_SetConfig>
      break;
 80020f0:	e02c      	b.n	800214c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020fe:	461a      	mov	r2, r3
 8002100:	f000 f8ed 	bl	80022de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2160      	movs	r1, #96	; 0x60
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f917 	bl	800233e <TIM_ITRx_SetConfig>
      break;
 8002110:	e01c      	b.n	800214c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800211e:	461a      	mov	r2, r3
 8002120:	f000 f8ae 	bl	8002280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2140      	movs	r1, #64	; 0x40
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f907 	bl	800233e <TIM_ITRx_SetConfig>
      break;
 8002130:	e00c      	b.n	800214c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4619      	mov	r1, r3
 800213c:	4610      	mov	r0, r2
 800213e:	f000 f8fe 	bl	800233e <TIM_ITRx_SetConfig>
      break;
 8002142:	e003      	b.n	800214c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
      break;
 8002148:	e000      	b.n	800214c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800214a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800215c:	7bfb      	ldrb	r3, [r7, #15]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3a      	ldr	r2, [pc, #232]	; (8002264 <TIM_Base_SetConfig+0xfc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00f      	beq.n	80021a0 <TIM_Base_SetConfig+0x38>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002186:	d00b      	beq.n	80021a0 <TIM_Base_SetConfig+0x38>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a37      	ldr	r2, [pc, #220]	; (8002268 <TIM_Base_SetConfig+0x100>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d007      	beq.n	80021a0 <TIM_Base_SetConfig+0x38>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a36      	ldr	r2, [pc, #216]	; (800226c <TIM_Base_SetConfig+0x104>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d003      	beq.n	80021a0 <TIM_Base_SetConfig+0x38>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a35      	ldr	r2, [pc, #212]	; (8002270 <TIM_Base_SetConfig+0x108>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d108      	bne.n	80021b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2b      	ldr	r2, [pc, #172]	; (8002264 <TIM_Base_SetConfig+0xfc>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01b      	beq.n	80021f2 <TIM_Base_SetConfig+0x8a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c0:	d017      	beq.n	80021f2 <TIM_Base_SetConfig+0x8a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a28      	ldr	r2, [pc, #160]	; (8002268 <TIM_Base_SetConfig+0x100>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <TIM_Base_SetConfig+0x8a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a27      	ldr	r2, [pc, #156]	; (800226c <TIM_Base_SetConfig+0x104>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00f      	beq.n	80021f2 <TIM_Base_SetConfig+0x8a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a26      	ldr	r2, [pc, #152]	; (8002270 <TIM_Base_SetConfig+0x108>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00b      	beq.n	80021f2 <TIM_Base_SetConfig+0x8a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a25      	ldr	r2, [pc, #148]	; (8002274 <TIM_Base_SetConfig+0x10c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d007      	beq.n	80021f2 <TIM_Base_SetConfig+0x8a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a24      	ldr	r2, [pc, #144]	; (8002278 <TIM_Base_SetConfig+0x110>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d003      	beq.n	80021f2 <TIM_Base_SetConfig+0x8a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a23      	ldr	r2, [pc, #140]	; (800227c <TIM_Base_SetConfig+0x114>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d108      	bne.n	8002204 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	4313      	orrs	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <TIM_Base_SetConfig+0xfc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d103      	bne.n	8002238 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b01      	cmp	r3, #1
 8002248:	d105      	bne.n	8002256 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f023 0201 	bic.w	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	611a      	str	r2, [r3, #16]
  }
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40010000 	.word	0x40010000
 8002268:	40000400 	.word	0x40000400
 800226c:	40000800 	.word	0x40000800
 8002270:	40000c00 	.word	0x40000c00
 8002274:	40014000 	.word	0x40014000
 8002278:	40014400 	.word	0x40014400
 800227c:	40014800 	.word	0x40014800

08002280 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	f023 0201 	bic.w	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f023 030a 	bic.w	r3, r3, #10
 80022bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	621a      	str	r2, [r3, #32]
}
 80022d2:	bf00      	nop
 80022d4:	371c      	adds	r7, #28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022de:	b480      	push	{r7}
 80022e0:	b087      	sub	sp, #28
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f023 0210 	bic.w	r2, r3, #16
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002308:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	031b      	lsls	r3, r3, #12
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800231a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	4313      	orrs	r3, r2
 8002324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	621a      	str	r2, [r3, #32]
}
 8002332:	bf00      	nop
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800233e:	b480      	push	{r7}
 8002340:	b085      	sub	sp, #20
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002354:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	f043 0307 	orr.w	r3, r3, #7
 8002360:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	609a      	str	r2, [r3, #8]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800238e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	021a      	lsls	r2, r3, #8
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	431a      	orrs	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4313      	orrs	r3, r2
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	609a      	str	r2, [r3, #8]
}
 80023a8:	bf00      	nop
 80023aa:	371c      	adds	r7, #28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e050      	b.n	800246e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a1c      	ldr	r2, [pc, #112]	; (800247c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d018      	beq.n	8002442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002418:	d013      	beq.n	8002442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a18      	ldr	r2, [pc, #96]	; (8002480 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d00e      	beq.n	8002442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a16      	ldr	r2, [pc, #88]	; (8002484 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d009      	beq.n	8002442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a15      	ldr	r2, [pc, #84]	; (8002488 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d004      	beq.n	8002442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a13      	ldr	r2, [pc, #76]	; (800248c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d10c      	bne.n	800245c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002448:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	4313      	orrs	r3, r2
 8002452:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40010000 	.word	0x40010000
 8002480:	40000400 	.word	0x40000400
 8002484:	40000800 	.word	0x40000800
 8002488:	40000c00 	.word	0x40000c00
 800248c:	40014000 	.word	0x40014000

08002490 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e042      	b.n	8002528 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe fafa 	bl	8000ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2224      	movs	r2, #36	; 0x24
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fdbd 	bl	8003054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002508:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af02      	add	r7, sp, #8
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b20      	cmp	r3, #32
 800254e:	d175      	bne.n	800263c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_UART_Transmit+0x2c>
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e06e      	b.n	800263e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2221      	movs	r2, #33	; 0x21
 800256a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800256e:	f7fe fca7 	bl	8000ec0 <HAL_GetTick>
 8002572:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	88fa      	ldrh	r2, [r7, #6]
 8002578:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	88fa      	ldrh	r2, [r7, #6]
 800257e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002588:	d108      	bne.n	800259c <HAL_UART_Transmit+0x6c>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d104      	bne.n	800259c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	e003      	b.n	80025a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025a4:	e02e      	b.n	8002604 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2180      	movs	r1, #128	; 0x80
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fb1f 	bl	8002bf4 <UART_WaitOnFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e03a      	b.n	800263e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10b      	bne.n	80025e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	3302      	adds	r3, #2
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	e007      	b.n	80025f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	3301      	adds	r3, #1
 80025f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1cb      	bne.n	80025a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2200      	movs	r2, #0
 8002616:	2140      	movs	r1, #64	; 0x40
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 faeb 	bl	8002bf4 <UART_WaitOnFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e006      	b.n	800263e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	e000      	b.n	800263e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800263c:	2302      	movs	r3, #2
  }
}
 800263e:	4618      	mov	r0, r3
 8002640:	3720      	adds	r7, #32
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	4613      	mov	r3, r2
 8002652:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b20      	cmp	r3, #32
 800265e:	d112      	bne.n	8002686 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <HAL_UART_Receive_IT+0x26>
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e00b      	b.n	8002688 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	461a      	mov	r2, r3
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 fb12 	bl	8002ca6 <UART_Start_Receive_IT>
 8002682:	4603      	mov	r3, r0
 8002684:	e000      	b.n	8002688 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002686:	2302      	movs	r3, #2
  }
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b0ba      	sub	sp, #232	; 0xe8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80026bc:	2300      	movs	r3, #0
 80026be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80026ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10f      	bne.n	80026f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <HAL_UART_IRQHandler+0x66>
 80026e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fbf2 	bl	8002ed8 <UART_Receive_IT>
      return;
 80026f4:	e25b      	b.n	8002bae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 80de 	beq.w	80028bc <HAL_UART_IRQHandler+0x22c>
 8002700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d106      	bne.n	800271a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800270c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002710:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80d1 	beq.w	80028bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800271a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <HAL_UART_IRQHandler+0xae>
 8002726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	f043 0201 	orr.w	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800273e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <HAL_UART_IRQHandler+0xd2>
 800274a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f043 0202 	orr.w	r2, r3, #2
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <HAL_UART_IRQHandler+0xf6>
 800276e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f043 0204 	orr.w	r2, r3, #4
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d011      	beq.n	80027b6 <HAL_UART_IRQHandler+0x126>
 8002792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002796:	f003 0320 	and.w	r3, r3, #32
 800279a:	2b00      	cmp	r3, #0
 800279c:	d105      	bne.n	80027aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800279e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f043 0208 	orr.w	r2, r3, #8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 81f2 	beq.w	8002ba4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_UART_IRQHandler+0x14e>
 80027cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fb7d 	bl	8002ed8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <HAL_UART_IRQHandler+0x17a>
 8002802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d04f      	beq.n	80028aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fa85 	bl	8002d1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281a:	2b40      	cmp	r3, #64	; 0x40
 800281c:	d141      	bne.n	80028a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3314      	adds	r3, #20
 8002824:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002828:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800282c:	e853 3f00 	ldrex	r3, [r3]
 8002830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002834:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800283c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3314      	adds	r3, #20
 8002846:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800284a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800284e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002852:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002856:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800285a:	e841 2300 	strex	r3, r2, [r1]
 800285e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1d9      	bne.n	800281e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d013      	beq.n	800289a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	4a7e      	ldr	r2, [pc, #504]	; (8002a70 <HAL_UART_IRQHandler+0x3e0>)
 8002878:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe fccf 	bl	8001222 <HAL_DMA_Abort_IT>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d016      	beq.n	80028b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002894:	4610      	mov	r0, r2
 8002896:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002898:	e00e      	b.n	80028b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f994 	bl	8002bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a0:	e00a      	b.n	80028b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f990 	bl	8002bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a8:	e006      	b.n	80028b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f98c 	bl	8002bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80028b6:	e175      	b.n	8002ba4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b8:	bf00      	nop
    return;
 80028ba:	e173      	b.n	8002ba4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	f040 814f 	bne.w	8002b64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8148 	beq.w	8002b64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 8141 	beq.w	8002b64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002902:	2b40      	cmp	r3, #64	; 0x40
 8002904:	f040 80b6 	bne.w	8002a74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002914:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8145 	beq.w	8002ba8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002926:	429a      	cmp	r2, r3
 8002928:	f080 813e 	bcs.w	8002ba8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002932:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800293e:	f000 8088 	beq.w	8002a52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	330c      	adds	r3, #12
 8002948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002950:	e853 3f00 	ldrex	r3, [r3]
 8002954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800295c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	330c      	adds	r3, #12
 800296a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800296e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002972:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002976:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800297a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800297e:	e841 2300 	strex	r3, r2, [r1]
 8002982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002986:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1d9      	bne.n	8002942 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3314      	adds	r3, #20
 8002994:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002998:	e853 3f00 	ldrex	r3, [r3]
 800299c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800299e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3314      	adds	r3, #20
 80029ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80029b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029be:	e841 2300 	strex	r3, r2, [r1]
 80029c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80029c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1e1      	bne.n	800298e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3314      	adds	r3, #20
 80029d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029d4:	e853 3f00 	ldrex	r3, [r3]
 80029d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3314      	adds	r3, #20
 80029ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029f6:	e841 2300 	strex	r3, r2, [r1]
 80029fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1e3      	bne.n	80029ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	330c      	adds	r3, #12
 8002a16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a1a:	e853 3f00 	ldrex	r3, [r3]
 8002a1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a22:	f023 0310 	bic.w	r3, r3, #16
 8002a26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	330c      	adds	r3, #12
 8002a30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a34:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a3c:	e841 2300 	strex	r3, r2, [r1]
 8002a40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1e3      	bne.n	8002a10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe fb78 	bl	8001142 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2202      	movs	r2, #2
 8002a56:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	4619      	mov	r1, r3
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f8b7 	bl	8002bdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a6e:	e09b      	b.n	8002ba8 <HAL_UART_IRQHandler+0x518>
 8002a70:	08002de1 	.word	0x08002de1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 808e 	beq.w	8002bac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8089 	beq.w	8002bac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	330c      	adds	r3, #12
 8002aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	e853 3f00 	ldrex	r3, [r3]
 8002aa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ab0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002abe:	647a      	str	r2, [r7, #68]	; 0x44
 8002ac0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ac6:	e841 2300 	strex	r3, r2, [r1]
 8002aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1e3      	bne.n	8002a9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	3314      	adds	r3, #20
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	e853 3f00 	ldrex	r3, [r3]
 8002ae0:	623b      	str	r3, [r7, #32]
   return(result);
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3314      	adds	r3, #20
 8002af2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002af6:	633a      	str	r2, [r7, #48]	; 0x30
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002afe:	e841 2300 	strex	r3, r2, [r1]
 8002b02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1e3      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	e853 3f00 	ldrex	r3, [r3]
 8002b26:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f023 0310 	bic.w	r3, r3, #16
 8002b2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	330c      	adds	r3, #12
 8002b38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b3c:	61fa      	str	r2, [r7, #28]
 8002b3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b40:	69b9      	ldr	r1, [r7, #24]
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	e841 2300 	strex	r3, r2, [r1]
 8002b48:	617b      	str	r3, [r7, #20]
   return(result);
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1e3      	bne.n	8002b18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f83d 	bl	8002bdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b62:	e023      	b.n	8002bac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d009      	beq.n	8002b84 <HAL_UART_IRQHandler+0x4f4>
 8002b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f943 	bl	8002e08 <UART_Transmit_IT>
    return;
 8002b82:	e014      	b.n	8002bae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00e      	beq.n	8002bae <HAL_UART_IRQHandler+0x51e>
 8002b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f983 	bl	8002ea8 <UART_EndTransmit_IT>
    return;
 8002ba2:	e004      	b.n	8002bae <HAL_UART_IRQHandler+0x51e>
    return;
 8002ba4:	bf00      	nop
 8002ba6:	e002      	b.n	8002bae <HAL_UART_IRQHandler+0x51e>
      return;
 8002ba8:	bf00      	nop
 8002baa:	e000      	b.n	8002bae <HAL_UART_IRQHandler+0x51e>
      return;
 8002bac:	bf00      	nop
  }
}
 8002bae:	37e8      	adds	r7, #232	; 0xe8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	4613      	mov	r3, r2
 8002c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c04:	e03b      	b.n	8002c7e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d037      	beq.n	8002c7e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0e:	f7fe f957 	bl	8000ec0 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	6a3a      	ldr	r2, [r7, #32]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e03a      	b.n	8002c9e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d023      	beq.n	8002c7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b80      	cmp	r3, #128	; 0x80
 8002c3a:	d020      	beq.n	8002c7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b40      	cmp	r3, #64	; 0x40
 8002c40:	d01d      	beq.n	8002c7e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d116      	bne.n	8002c7e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f857 	bl	8002d1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2208      	movs	r2, #8
 8002c70:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00f      	b.n	8002c9e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4013      	ands	r3, r2
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	bf0c      	ite	eq
 8002c8e:	2301      	moveq	r3, #1
 8002c90:	2300      	movne	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d0b4      	beq.n	8002c06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b085      	sub	sp, #20
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	88fa      	ldrh	r2, [r7, #6]
 8002cbe:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	88fa      	ldrh	r2, [r7, #6]
 8002cc4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2222      	movs	r2, #34	; 0x22
 8002cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0220 	orr.w	r2, r2, #32
 8002d0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b095      	sub	sp, #84	; 0x54
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	330c      	adds	r3, #12
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2c:	e853 3f00 	ldrex	r3, [r3]
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	330c      	adds	r3, #12
 8002d40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d42:	643a      	str	r2, [r7, #64]	; 0x40
 8002d44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d4a:	e841 2300 	strex	r3, r2, [r1]
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1e5      	bne.n	8002d22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3314      	adds	r3, #20
 8002d5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	e853 3f00 	ldrex	r3, [r3]
 8002d64:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3314      	adds	r3, #20
 8002d74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d7e:	e841 2300 	strex	r3, r2, [r1]
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1e5      	bne.n	8002d56 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d119      	bne.n	8002dc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	330c      	adds	r3, #12
 8002d98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	e853 3f00 	ldrex	r3, [r3]
 8002da0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f023 0310 	bic.w	r3, r3, #16
 8002da8:	647b      	str	r3, [r7, #68]	; 0x44
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	330c      	adds	r3, #12
 8002db0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002db2:	61ba      	str	r2, [r7, #24]
 8002db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db6:	6979      	ldr	r1, [r7, #20]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	e841 2300 	strex	r3, r2, [r1]
 8002dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1e5      	bne.n	8002d92 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002dd4:	bf00      	nop
 8002dd6:	3754      	adds	r7, #84	; 0x54
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f7ff fee4 	bl	8002bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e00:	bf00      	nop
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b21      	cmp	r3, #33	; 0x21
 8002e1a:	d13e      	bne.n	8002e9a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e24:	d114      	bne.n	8002e50 <UART_Transmit_IT+0x48>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d110      	bne.n	8002e50 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e42:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	1c9a      	adds	r2, r3, #2
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	621a      	str	r2, [r3, #32]
 8002e4e:	e008      	b.n	8002e62 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	1c59      	adds	r1, r3, #1
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6211      	str	r1, [r2, #32]
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	4619      	mov	r1, r3
 8002e70:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10f      	bne.n	8002e96 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e000      	b.n	8002e9c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e9a:	2302      	movs	r3, #2
  }
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ebe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff fe73 	bl	8002bb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08c      	sub	sp, #48	; 0x30
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b22      	cmp	r3, #34	; 0x22
 8002eea:	f040 80ae 	bne.w	800304a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef6:	d117      	bne.n	8002f28 <UART_Receive_IT+0x50>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d113      	bne.n	8002f28 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	1c9a      	adds	r2, r3, #2
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	629a      	str	r2, [r3, #40]	; 0x28
 8002f26:	e026      	b.n	8002f76 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f3a:	d007      	beq.n	8002f4c <UART_Receive_IT+0x74>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10a      	bne.n	8002f5a <UART_Receive_IT+0x82>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d106      	bne.n	8002f5a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f56:	701a      	strb	r2, [r3, #0]
 8002f58:	e008      	b.n	8002f6c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	4619      	mov	r1, r3
 8002f84:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d15d      	bne.n	8003046 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0220 	bic.w	r2, r2, #32
 8002f98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fa8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d135      	bne.n	800303c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	330c      	adds	r3, #12
 8002fdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	e853 3f00 	ldrex	r3, [r3]
 8002fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f023 0310 	bic.w	r3, r3, #16
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	330c      	adds	r3, #12
 8002ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff6:	623a      	str	r2, [r7, #32]
 8002ff8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffa:	69f9      	ldr	r1, [r7, #28]
 8002ffc:	6a3a      	ldr	r2, [r7, #32]
 8002ffe:	e841 2300 	strex	r3, r2, [r1]
 8003002:	61bb      	str	r3, [r7, #24]
   return(result);
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1e5      	bne.n	8002fd6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b10      	cmp	r3, #16
 8003016:	d10a      	bne.n	800302e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003032:	4619      	mov	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff fdd1 	bl	8002bdc <HAL_UARTEx_RxEventCallback>
 800303a:	e002      	b.n	8003042 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7fd fe6b 	bl	8000d18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	e002      	b.n	800304c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	e000      	b.n	800304c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800304a:	2302      	movs	r3, #2
  }
}
 800304c:	4618      	mov	r0, r3
 800304e:	3730      	adds	r7, #48	; 0x30
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003058:	b0c0      	sub	sp, #256	; 0x100
 800305a:	af00      	add	r7, sp, #0
 800305c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003070:	68d9      	ldr	r1, [r3, #12]
 8003072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	ea40 0301 	orr.w	r3, r0, r1
 800307c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800307e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	431a      	orrs	r2, r3
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	431a      	orrs	r2, r3
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030ac:	f021 010c 	bic.w	r1, r1, #12
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030ba:	430b      	orrs	r3, r1
 80030bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ce:	6999      	ldr	r1, [r3, #24]
 80030d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	ea40 0301 	orr.w	r3, r0, r1
 80030da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b8f      	ldr	r3, [pc, #572]	; (8003320 <UART_SetConfig+0x2cc>)
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d005      	beq.n	80030f4 <UART_SetConfig+0xa0>
 80030e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	4b8d      	ldr	r3, [pc, #564]	; (8003324 <UART_SetConfig+0x2d0>)
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d104      	bne.n	80030fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030f4:	f7fe feb2 	bl	8001e5c <HAL_RCC_GetPCLK2Freq>
 80030f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030fc:	e003      	b.n	8003106 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030fe:	f7fe fe99 	bl	8001e34 <HAL_RCC_GetPCLK1Freq>
 8003102:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003110:	f040 810c 	bne.w	800332c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003118:	2200      	movs	r2, #0
 800311a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800311e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003122:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003126:	4622      	mov	r2, r4
 8003128:	462b      	mov	r3, r5
 800312a:	1891      	adds	r1, r2, r2
 800312c:	65b9      	str	r1, [r7, #88]	; 0x58
 800312e:	415b      	adcs	r3, r3
 8003130:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003132:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003136:	4621      	mov	r1, r4
 8003138:	eb12 0801 	adds.w	r8, r2, r1
 800313c:	4629      	mov	r1, r5
 800313e:	eb43 0901 	adc.w	r9, r3, r1
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800314e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003152:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003156:	4690      	mov	r8, r2
 8003158:	4699      	mov	r9, r3
 800315a:	4623      	mov	r3, r4
 800315c:	eb18 0303 	adds.w	r3, r8, r3
 8003160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003164:	462b      	mov	r3, r5
 8003166:	eb49 0303 	adc.w	r3, r9, r3
 800316a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800316e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800317a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800317e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003182:	460b      	mov	r3, r1
 8003184:	18db      	adds	r3, r3, r3
 8003186:	653b      	str	r3, [r7, #80]	; 0x50
 8003188:	4613      	mov	r3, r2
 800318a:	eb42 0303 	adc.w	r3, r2, r3
 800318e:	657b      	str	r3, [r7, #84]	; 0x54
 8003190:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003194:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003198:	f7fd f872 	bl	8000280 <__aeabi_uldivmod>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4b61      	ldr	r3, [pc, #388]	; (8003328 <UART_SetConfig+0x2d4>)
 80031a2:	fba3 2302 	umull	r2, r3, r3, r2
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	011c      	lsls	r4, r3, #4
 80031aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80031b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80031bc:	4642      	mov	r2, r8
 80031be:	464b      	mov	r3, r9
 80031c0:	1891      	adds	r1, r2, r2
 80031c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80031c4:	415b      	adcs	r3, r3
 80031c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031cc:	4641      	mov	r1, r8
 80031ce:	eb12 0a01 	adds.w	sl, r2, r1
 80031d2:	4649      	mov	r1, r9
 80031d4:	eb43 0b01 	adc.w	fp, r3, r1
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031ec:	4692      	mov	sl, r2
 80031ee:	469b      	mov	fp, r3
 80031f0:	4643      	mov	r3, r8
 80031f2:	eb1a 0303 	adds.w	r3, sl, r3
 80031f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031fa:	464b      	mov	r3, r9
 80031fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003200:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003210:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003214:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003218:	460b      	mov	r3, r1
 800321a:	18db      	adds	r3, r3, r3
 800321c:	643b      	str	r3, [r7, #64]	; 0x40
 800321e:	4613      	mov	r3, r2
 8003220:	eb42 0303 	adc.w	r3, r2, r3
 8003224:	647b      	str	r3, [r7, #68]	; 0x44
 8003226:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800322a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800322e:	f7fd f827 	bl	8000280 <__aeabi_uldivmod>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4611      	mov	r1, r2
 8003238:	4b3b      	ldr	r3, [pc, #236]	; (8003328 <UART_SetConfig+0x2d4>)
 800323a:	fba3 2301 	umull	r2, r3, r3, r1
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	2264      	movs	r2, #100	; 0x64
 8003242:	fb02 f303 	mul.w	r3, r2, r3
 8003246:	1acb      	subs	r3, r1, r3
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800324e:	4b36      	ldr	r3, [pc, #216]	; (8003328 <UART_SetConfig+0x2d4>)
 8003250:	fba3 2302 	umull	r2, r3, r3, r2
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800325c:	441c      	add	r4, r3
 800325e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003262:	2200      	movs	r2, #0
 8003264:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003268:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800326c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003270:	4642      	mov	r2, r8
 8003272:	464b      	mov	r3, r9
 8003274:	1891      	adds	r1, r2, r2
 8003276:	63b9      	str	r1, [r7, #56]	; 0x38
 8003278:	415b      	adcs	r3, r3
 800327a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800327c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003280:	4641      	mov	r1, r8
 8003282:	1851      	adds	r1, r2, r1
 8003284:	6339      	str	r1, [r7, #48]	; 0x30
 8003286:	4649      	mov	r1, r9
 8003288:	414b      	adcs	r3, r1
 800328a:	637b      	str	r3, [r7, #52]	; 0x34
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003298:	4659      	mov	r1, fp
 800329a:	00cb      	lsls	r3, r1, #3
 800329c:	4651      	mov	r1, sl
 800329e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032a2:	4651      	mov	r1, sl
 80032a4:	00ca      	lsls	r2, r1, #3
 80032a6:	4610      	mov	r0, r2
 80032a8:	4619      	mov	r1, r3
 80032aa:	4603      	mov	r3, r0
 80032ac:	4642      	mov	r2, r8
 80032ae:	189b      	adds	r3, r3, r2
 80032b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032b4:	464b      	mov	r3, r9
 80032b6:	460a      	mov	r2, r1
 80032b8:	eb42 0303 	adc.w	r3, r2, r3
 80032bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80032d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032d4:	460b      	mov	r3, r1
 80032d6:	18db      	adds	r3, r3, r3
 80032d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032da:	4613      	mov	r3, r2
 80032dc:	eb42 0303 	adc.w	r3, r2, r3
 80032e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032ea:	f7fc ffc9 	bl	8000280 <__aeabi_uldivmod>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <UART_SetConfig+0x2d4>)
 80032f4:	fba3 1302 	umull	r1, r3, r3, r2
 80032f8:	095b      	lsrs	r3, r3, #5
 80032fa:	2164      	movs	r1, #100	; 0x64
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	3332      	adds	r3, #50	; 0x32
 8003306:	4a08      	ldr	r2, [pc, #32]	; (8003328 <UART_SetConfig+0x2d4>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	f003 0207 	and.w	r2, r3, #7
 8003312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4422      	add	r2, r4
 800331a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800331c:	e106      	b.n	800352c <UART_SetConfig+0x4d8>
 800331e:	bf00      	nop
 8003320:	40011000 	.word	0x40011000
 8003324:	40011400 	.word	0x40011400
 8003328:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800332c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003330:	2200      	movs	r2, #0
 8003332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003336:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800333a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800333e:	4642      	mov	r2, r8
 8003340:	464b      	mov	r3, r9
 8003342:	1891      	adds	r1, r2, r2
 8003344:	6239      	str	r1, [r7, #32]
 8003346:	415b      	adcs	r3, r3
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800334e:	4641      	mov	r1, r8
 8003350:	1854      	adds	r4, r2, r1
 8003352:	4649      	mov	r1, r9
 8003354:	eb43 0501 	adc.w	r5, r3, r1
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	00eb      	lsls	r3, r5, #3
 8003362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003366:	00e2      	lsls	r2, r4, #3
 8003368:	4614      	mov	r4, r2
 800336a:	461d      	mov	r5, r3
 800336c:	4643      	mov	r3, r8
 800336e:	18e3      	adds	r3, r4, r3
 8003370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003374:	464b      	mov	r3, r9
 8003376:	eb45 0303 	adc.w	r3, r5, r3
 800337a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800337e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800338a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800339a:	4629      	mov	r1, r5
 800339c:	008b      	lsls	r3, r1, #2
 800339e:	4621      	mov	r1, r4
 80033a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033a4:	4621      	mov	r1, r4
 80033a6:	008a      	lsls	r2, r1, #2
 80033a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80033ac:	f7fc ff68 	bl	8000280 <__aeabi_uldivmod>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4b60      	ldr	r3, [pc, #384]	; (8003538 <UART_SetConfig+0x4e4>)
 80033b6:	fba3 2302 	umull	r2, r3, r3, r2
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	011c      	lsls	r4, r3, #4
 80033be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033c2:	2200      	movs	r2, #0
 80033c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80033d0:	4642      	mov	r2, r8
 80033d2:	464b      	mov	r3, r9
 80033d4:	1891      	adds	r1, r2, r2
 80033d6:	61b9      	str	r1, [r7, #24]
 80033d8:	415b      	adcs	r3, r3
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033e0:	4641      	mov	r1, r8
 80033e2:	1851      	adds	r1, r2, r1
 80033e4:	6139      	str	r1, [r7, #16]
 80033e6:	4649      	mov	r1, r9
 80033e8:	414b      	adcs	r3, r1
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033f8:	4659      	mov	r1, fp
 80033fa:	00cb      	lsls	r3, r1, #3
 80033fc:	4651      	mov	r1, sl
 80033fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003402:	4651      	mov	r1, sl
 8003404:	00ca      	lsls	r2, r1, #3
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	4603      	mov	r3, r0
 800340c:	4642      	mov	r2, r8
 800340e:	189b      	adds	r3, r3, r2
 8003410:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003414:	464b      	mov	r3, r9
 8003416:	460a      	mov	r2, r1
 8003418:	eb42 0303 	adc.w	r3, r2, r3
 800341c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	67bb      	str	r3, [r7, #120]	; 0x78
 800342a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003438:	4649      	mov	r1, r9
 800343a:	008b      	lsls	r3, r1, #2
 800343c:	4641      	mov	r1, r8
 800343e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003442:	4641      	mov	r1, r8
 8003444:	008a      	lsls	r2, r1, #2
 8003446:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800344a:	f7fc ff19 	bl	8000280 <__aeabi_uldivmod>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4611      	mov	r1, r2
 8003454:	4b38      	ldr	r3, [pc, #224]	; (8003538 <UART_SetConfig+0x4e4>)
 8003456:	fba3 2301 	umull	r2, r3, r3, r1
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	2264      	movs	r2, #100	; 0x64
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	1acb      	subs	r3, r1, r3
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	3332      	adds	r3, #50	; 0x32
 8003468:	4a33      	ldr	r2, [pc, #204]	; (8003538 <UART_SetConfig+0x4e4>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003474:	441c      	add	r4, r3
 8003476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800347a:	2200      	movs	r2, #0
 800347c:	673b      	str	r3, [r7, #112]	; 0x70
 800347e:	677a      	str	r2, [r7, #116]	; 0x74
 8003480:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003484:	4642      	mov	r2, r8
 8003486:	464b      	mov	r3, r9
 8003488:	1891      	adds	r1, r2, r2
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	415b      	adcs	r3, r3
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003494:	4641      	mov	r1, r8
 8003496:	1851      	adds	r1, r2, r1
 8003498:	6039      	str	r1, [r7, #0]
 800349a:	4649      	mov	r1, r9
 800349c:	414b      	adcs	r3, r1
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034ac:	4659      	mov	r1, fp
 80034ae:	00cb      	lsls	r3, r1, #3
 80034b0:	4651      	mov	r1, sl
 80034b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034b6:	4651      	mov	r1, sl
 80034b8:	00ca      	lsls	r2, r1, #3
 80034ba:	4610      	mov	r0, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	4603      	mov	r3, r0
 80034c0:	4642      	mov	r2, r8
 80034c2:	189b      	adds	r3, r3, r2
 80034c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80034c6:	464b      	mov	r3, r9
 80034c8:	460a      	mov	r2, r1
 80034ca:	eb42 0303 	adc.w	r3, r2, r3
 80034ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	663b      	str	r3, [r7, #96]	; 0x60
 80034da:	667a      	str	r2, [r7, #100]	; 0x64
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034e8:	4649      	mov	r1, r9
 80034ea:	008b      	lsls	r3, r1, #2
 80034ec:	4641      	mov	r1, r8
 80034ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034f2:	4641      	mov	r1, r8
 80034f4:	008a      	lsls	r2, r1, #2
 80034f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034fa:	f7fc fec1 	bl	8000280 <__aeabi_uldivmod>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <UART_SetConfig+0x4e4>)
 8003504:	fba3 1302 	umull	r1, r3, r3, r2
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	2164      	movs	r1, #100	; 0x64
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	3332      	adds	r3, #50	; 0x32
 8003516:	4a08      	ldr	r2, [pc, #32]	; (8003538 <UART_SetConfig+0x4e4>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	f003 020f 	and.w	r2, r3, #15
 8003522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4422      	add	r2, r4
 800352a:	609a      	str	r2, [r3, #8]
}
 800352c:	bf00      	nop
 800352e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003532:	46bd      	mov	sp, r7
 8003534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003538:	51eb851f 	.word	0x51eb851f

0800353c <std>:
 800353c:	2300      	movs	r3, #0
 800353e:	b510      	push	{r4, lr}
 8003540:	4604      	mov	r4, r0
 8003542:	e9c0 3300 	strd	r3, r3, [r0]
 8003546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800354a:	6083      	str	r3, [r0, #8]
 800354c:	8181      	strh	r1, [r0, #12]
 800354e:	6643      	str	r3, [r0, #100]	; 0x64
 8003550:	81c2      	strh	r2, [r0, #14]
 8003552:	6183      	str	r3, [r0, #24]
 8003554:	4619      	mov	r1, r3
 8003556:	2208      	movs	r2, #8
 8003558:	305c      	adds	r0, #92	; 0x5c
 800355a:	f000 f906 	bl	800376a <memset>
 800355e:	4b0d      	ldr	r3, [pc, #52]	; (8003594 <std+0x58>)
 8003560:	6263      	str	r3, [r4, #36]	; 0x24
 8003562:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <std+0x5c>)
 8003564:	62a3      	str	r3, [r4, #40]	; 0x28
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <std+0x60>)
 8003568:	62e3      	str	r3, [r4, #44]	; 0x2c
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <std+0x64>)
 800356c:	6323      	str	r3, [r4, #48]	; 0x30
 800356e:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <std+0x68>)
 8003570:	6224      	str	r4, [r4, #32]
 8003572:	429c      	cmp	r4, r3
 8003574:	d006      	beq.n	8003584 <std+0x48>
 8003576:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800357a:	4294      	cmp	r4, r2
 800357c:	d002      	beq.n	8003584 <std+0x48>
 800357e:	33d0      	adds	r3, #208	; 0xd0
 8003580:	429c      	cmp	r4, r3
 8003582:	d105      	bne.n	8003590 <std+0x54>
 8003584:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800358c:	f000 b966 	b.w	800385c <__retarget_lock_init_recursive>
 8003590:	bd10      	pop	{r4, pc}
 8003592:	bf00      	nop
 8003594:	080036e5 	.word	0x080036e5
 8003598:	08003707 	.word	0x08003707
 800359c:	0800373f 	.word	0x0800373f
 80035a0:	08003763 	.word	0x08003763
 80035a4:	2000022c 	.word	0x2000022c

080035a8 <stdio_exit_handler>:
 80035a8:	4a02      	ldr	r2, [pc, #8]	; (80035b4 <stdio_exit_handler+0xc>)
 80035aa:	4903      	ldr	r1, [pc, #12]	; (80035b8 <stdio_exit_handler+0x10>)
 80035ac:	4803      	ldr	r0, [pc, #12]	; (80035bc <stdio_exit_handler+0x14>)
 80035ae:	f000 b869 	b.w	8003684 <_fwalk_sglue>
 80035b2:	bf00      	nop
 80035b4:	2000000c 	.word	0x2000000c
 80035b8:	08004109 	.word	0x08004109
 80035bc:	20000018 	.word	0x20000018

080035c0 <cleanup_stdio>:
 80035c0:	6841      	ldr	r1, [r0, #4]
 80035c2:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <cleanup_stdio+0x34>)
 80035c4:	4299      	cmp	r1, r3
 80035c6:	b510      	push	{r4, lr}
 80035c8:	4604      	mov	r4, r0
 80035ca:	d001      	beq.n	80035d0 <cleanup_stdio+0x10>
 80035cc:	f000 fd9c 	bl	8004108 <_fflush_r>
 80035d0:	68a1      	ldr	r1, [r4, #8]
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <cleanup_stdio+0x38>)
 80035d4:	4299      	cmp	r1, r3
 80035d6:	d002      	beq.n	80035de <cleanup_stdio+0x1e>
 80035d8:	4620      	mov	r0, r4
 80035da:	f000 fd95 	bl	8004108 <_fflush_r>
 80035de:	68e1      	ldr	r1, [r4, #12]
 80035e0:	4b06      	ldr	r3, [pc, #24]	; (80035fc <cleanup_stdio+0x3c>)
 80035e2:	4299      	cmp	r1, r3
 80035e4:	d004      	beq.n	80035f0 <cleanup_stdio+0x30>
 80035e6:	4620      	mov	r0, r4
 80035e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035ec:	f000 bd8c 	b.w	8004108 <_fflush_r>
 80035f0:	bd10      	pop	{r4, pc}
 80035f2:	bf00      	nop
 80035f4:	2000022c 	.word	0x2000022c
 80035f8:	20000294 	.word	0x20000294
 80035fc:	200002fc 	.word	0x200002fc

08003600 <global_stdio_init.part.0>:
 8003600:	b510      	push	{r4, lr}
 8003602:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <global_stdio_init.part.0+0x30>)
 8003604:	4c0b      	ldr	r4, [pc, #44]	; (8003634 <global_stdio_init.part.0+0x34>)
 8003606:	4a0c      	ldr	r2, [pc, #48]	; (8003638 <global_stdio_init.part.0+0x38>)
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	4620      	mov	r0, r4
 800360c:	2200      	movs	r2, #0
 800360e:	2104      	movs	r1, #4
 8003610:	f7ff ff94 	bl	800353c <std>
 8003614:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003618:	2201      	movs	r2, #1
 800361a:	2109      	movs	r1, #9
 800361c:	f7ff ff8e 	bl	800353c <std>
 8003620:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003624:	2202      	movs	r2, #2
 8003626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800362a:	2112      	movs	r1, #18
 800362c:	f7ff bf86 	b.w	800353c <std>
 8003630:	20000364 	.word	0x20000364
 8003634:	2000022c 	.word	0x2000022c
 8003638:	080035a9 	.word	0x080035a9

0800363c <__sfp_lock_acquire>:
 800363c:	4801      	ldr	r0, [pc, #4]	; (8003644 <__sfp_lock_acquire+0x8>)
 800363e:	f000 b90e 	b.w	800385e <__retarget_lock_acquire_recursive>
 8003642:	bf00      	nop
 8003644:	2000036d 	.word	0x2000036d

08003648 <__sfp_lock_release>:
 8003648:	4801      	ldr	r0, [pc, #4]	; (8003650 <__sfp_lock_release+0x8>)
 800364a:	f000 b909 	b.w	8003860 <__retarget_lock_release_recursive>
 800364e:	bf00      	nop
 8003650:	2000036d 	.word	0x2000036d

08003654 <__sinit>:
 8003654:	b510      	push	{r4, lr}
 8003656:	4604      	mov	r4, r0
 8003658:	f7ff fff0 	bl	800363c <__sfp_lock_acquire>
 800365c:	6a23      	ldr	r3, [r4, #32]
 800365e:	b11b      	cbz	r3, 8003668 <__sinit+0x14>
 8003660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003664:	f7ff bff0 	b.w	8003648 <__sfp_lock_release>
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <__sinit+0x28>)
 800366a:	6223      	str	r3, [r4, #32]
 800366c:	4b04      	ldr	r3, [pc, #16]	; (8003680 <__sinit+0x2c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f5      	bne.n	8003660 <__sinit+0xc>
 8003674:	f7ff ffc4 	bl	8003600 <global_stdio_init.part.0>
 8003678:	e7f2      	b.n	8003660 <__sinit+0xc>
 800367a:	bf00      	nop
 800367c:	080035c1 	.word	0x080035c1
 8003680:	20000364 	.word	0x20000364

08003684 <_fwalk_sglue>:
 8003684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003688:	4607      	mov	r7, r0
 800368a:	4688      	mov	r8, r1
 800368c:	4614      	mov	r4, r2
 800368e:	2600      	movs	r6, #0
 8003690:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003694:	f1b9 0901 	subs.w	r9, r9, #1
 8003698:	d505      	bpl.n	80036a6 <_fwalk_sglue+0x22>
 800369a:	6824      	ldr	r4, [r4, #0]
 800369c:	2c00      	cmp	r4, #0
 800369e:	d1f7      	bne.n	8003690 <_fwalk_sglue+0xc>
 80036a0:	4630      	mov	r0, r6
 80036a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036a6:	89ab      	ldrh	r3, [r5, #12]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d907      	bls.n	80036bc <_fwalk_sglue+0x38>
 80036ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036b0:	3301      	adds	r3, #1
 80036b2:	d003      	beq.n	80036bc <_fwalk_sglue+0x38>
 80036b4:	4629      	mov	r1, r5
 80036b6:	4638      	mov	r0, r7
 80036b8:	47c0      	blx	r8
 80036ba:	4306      	orrs	r6, r0
 80036bc:	3568      	adds	r5, #104	; 0x68
 80036be:	e7e9      	b.n	8003694 <_fwalk_sglue+0x10>

080036c0 <iprintf>:
 80036c0:	b40f      	push	{r0, r1, r2, r3}
 80036c2:	b507      	push	{r0, r1, r2, lr}
 80036c4:	4906      	ldr	r1, [pc, #24]	; (80036e0 <iprintf+0x20>)
 80036c6:	ab04      	add	r3, sp, #16
 80036c8:	6808      	ldr	r0, [r1, #0]
 80036ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80036ce:	6881      	ldr	r1, [r0, #8]
 80036d0:	9301      	str	r3, [sp, #4]
 80036d2:	f000 f9e9 	bl	8003aa8 <_vfiprintf_r>
 80036d6:	b003      	add	sp, #12
 80036d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80036dc:	b004      	add	sp, #16
 80036de:	4770      	bx	lr
 80036e0:	20000064 	.word	0x20000064

080036e4 <__sread>:
 80036e4:	b510      	push	{r4, lr}
 80036e6:	460c      	mov	r4, r1
 80036e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ec:	f000 f868 	bl	80037c0 <_read_r>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	bfab      	itete	ge
 80036f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80036f6:	89a3      	ldrhlt	r3, [r4, #12]
 80036f8:	181b      	addge	r3, r3, r0
 80036fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80036fe:	bfac      	ite	ge
 8003700:	6563      	strge	r3, [r4, #84]	; 0x54
 8003702:	81a3      	strhlt	r3, [r4, #12]
 8003704:	bd10      	pop	{r4, pc}

08003706 <__swrite>:
 8003706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800370a:	461f      	mov	r7, r3
 800370c:	898b      	ldrh	r3, [r1, #12]
 800370e:	05db      	lsls	r3, r3, #23
 8003710:	4605      	mov	r5, r0
 8003712:	460c      	mov	r4, r1
 8003714:	4616      	mov	r6, r2
 8003716:	d505      	bpl.n	8003724 <__swrite+0x1e>
 8003718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800371c:	2302      	movs	r3, #2
 800371e:	2200      	movs	r2, #0
 8003720:	f000 f83c 	bl	800379c <_lseek_r>
 8003724:	89a3      	ldrh	r3, [r4, #12]
 8003726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800372a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800372e:	81a3      	strh	r3, [r4, #12]
 8003730:	4632      	mov	r2, r6
 8003732:	463b      	mov	r3, r7
 8003734:	4628      	mov	r0, r5
 8003736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800373a:	f000 b853 	b.w	80037e4 <_write_r>

0800373e <__sseek>:
 800373e:	b510      	push	{r4, lr}
 8003740:	460c      	mov	r4, r1
 8003742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003746:	f000 f829 	bl	800379c <_lseek_r>
 800374a:	1c43      	adds	r3, r0, #1
 800374c:	89a3      	ldrh	r3, [r4, #12]
 800374e:	bf15      	itete	ne
 8003750:	6560      	strne	r0, [r4, #84]	; 0x54
 8003752:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003756:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800375a:	81a3      	strheq	r3, [r4, #12]
 800375c:	bf18      	it	ne
 800375e:	81a3      	strhne	r3, [r4, #12]
 8003760:	bd10      	pop	{r4, pc}

08003762 <__sclose>:
 8003762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003766:	f000 b809 	b.w	800377c <_close_r>

0800376a <memset>:
 800376a:	4402      	add	r2, r0
 800376c:	4603      	mov	r3, r0
 800376e:	4293      	cmp	r3, r2
 8003770:	d100      	bne.n	8003774 <memset+0xa>
 8003772:	4770      	bx	lr
 8003774:	f803 1b01 	strb.w	r1, [r3], #1
 8003778:	e7f9      	b.n	800376e <memset+0x4>
	...

0800377c <_close_r>:
 800377c:	b538      	push	{r3, r4, r5, lr}
 800377e:	4d06      	ldr	r5, [pc, #24]	; (8003798 <_close_r+0x1c>)
 8003780:	2300      	movs	r3, #0
 8003782:	4604      	mov	r4, r0
 8003784:	4608      	mov	r0, r1
 8003786:	602b      	str	r3, [r5, #0]
 8003788:	f7fd fa33 	bl	8000bf2 <_close>
 800378c:	1c43      	adds	r3, r0, #1
 800378e:	d102      	bne.n	8003796 <_close_r+0x1a>
 8003790:	682b      	ldr	r3, [r5, #0]
 8003792:	b103      	cbz	r3, 8003796 <_close_r+0x1a>
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	bd38      	pop	{r3, r4, r5, pc}
 8003798:	20000368 	.word	0x20000368

0800379c <_lseek_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	4d07      	ldr	r5, [pc, #28]	; (80037bc <_lseek_r+0x20>)
 80037a0:	4604      	mov	r4, r0
 80037a2:	4608      	mov	r0, r1
 80037a4:	4611      	mov	r1, r2
 80037a6:	2200      	movs	r2, #0
 80037a8:	602a      	str	r2, [r5, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	f7fd fa48 	bl	8000c40 <_lseek>
 80037b0:	1c43      	adds	r3, r0, #1
 80037b2:	d102      	bne.n	80037ba <_lseek_r+0x1e>
 80037b4:	682b      	ldr	r3, [r5, #0]
 80037b6:	b103      	cbz	r3, 80037ba <_lseek_r+0x1e>
 80037b8:	6023      	str	r3, [r4, #0]
 80037ba:	bd38      	pop	{r3, r4, r5, pc}
 80037bc:	20000368 	.word	0x20000368

080037c0 <_read_r>:
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	4d07      	ldr	r5, [pc, #28]	; (80037e0 <_read_r+0x20>)
 80037c4:	4604      	mov	r4, r0
 80037c6:	4608      	mov	r0, r1
 80037c8:	4611      	mov	r1, r2
 80037ca:	2200      	movs	r2, #0
 80037cc:	602a      	str	r2, [r5, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	f7fd f9f2 	bl	8000bb8 <_read>
 80037d4:	1c43      	adds	r3, r0, #1
 80037d6:	d102      	bne.n	80037de <_read_r+0x1e>
 80037d8:	682b      	ldr	r3, [r5, #0]
 80037da:	b103      	cbz	r3, 80037de <_read_r+0x1e>
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	bd38      	pop	{r3, r4, r5, pc}
 80037e0:	20000368 	.word	0x20000368

080037e4 <_write_r>:
 80037e4:	b538      	push	{r3, r4, r5, lr}
 80037e6:	4d07      	ldr	r5, [pc, #28]	; (8003804 <_write_r+0x20>)
 80037e8:	4604      	mov	r4, r0
 80037ea:	4608      	mov	r0, r1
 80037ec:	4611      	mov	r1, r2
 80037ee:	2200      	movs	r2, #0
 80037f0:	602a      	str	r2, [r5, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	f7fd fabe 	bl	8000d74 <_write>
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	d102      	bne.n	8003802 <_write_r+0x1e>
 80037fc:	682b      	ldr	r3, [r5, #0]
 80037fe:	b103      	cbz	r3, 8003802 <_write_r+0x1e>
 8003800:	6023      	str	r3, [r4, #0]
 8003802:	bd38      	pop	{r3, r4, r5, pc}
 8003804:	20000368 	.word	0x20000368

08003808 <__errno>:
 8003808:	4b01      	ldr	r3, [pc, #4]	; (8003810 <__errno+0x8>)
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000064 	.word	0x20000064

08003814 <__libc_init_array>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	4d0d      	ldr	r5, [pc, #52]	; (800384c <__libc_init_array+0x38>)
 8003818:	4c0d      	ldr	r4, [pc, #52]	; (8003850 <__libc_init_array+0x3c>)
 800381a:	1b64      	subs	r4, r4, r5
 800381c:	10a4      	asrs	r4, r4, #2
 800381e:	2600      	movs	r6, #0
 8003820:	42a6      	cmp	r6, r4
 8003822:	d109      	bne.n	8003838 <__libc_init_array+0x24>
 8003824:	4d0b      	ldr	r5, [pc, #44]	; (8003854 <__libc_init_array+0x40>)
 8003826:	4c0c      	ldr	r4, [pc, #48]	; (8003858 <__libc_init_array+0x44>)
 8003828:	f000 fdc0 	bl	80043ac <_init>
 800382c:	1b64      	subs	r4, r4, r5
 800382e:	10a4      	asrs	r4, r4, #2
 8003830:	2600      	movs	r6, #0
 8003832:	42a6      	cmp	r6, r4
 8003834:	d105      	bne.n	8003842 <__libc_init_array+0x2e>
 8003836:	bd70      	pop	{r4, r5, r6, pc}
 8003838:	f855 3b04 	ldr.w	r3, [r5], #4
 800383c:	4798      	blx	r3
 800383e:	3601      	adds	r6, #1
 8003840:	e7ee      	b.n	8003820 <__libc_init_array+0xc>
 8003842:	f855 3b04 	ldr.w	r3, [r5], #4
 8003846:	4798      	blx	r3
 8003848:	3601      	adds	r6, #1
 800384a:	e7f2      	b.n	8003832 <__libc_init_array+0x1e>
 800384c:	08004424 	.word	0x08004424
 8003850:	08004424 	.word	0x08004424
 8003854:	08004424 	.word	0x08004424
 8003858:	08004428 	.word	0x08004428

0800385c <__retarget_lock_init_recursive>:
 800385c:	4770      	bx	lr

0800385e <__retarget_lock_acquire_recursive>:
 800385e:	4770      	bx	lr

08003860 <__retarget_lock_release_recursive>:
 8003860:	4770      	bx	lr
	...

08003864 <_free_r>:
 8003864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003866:	2900      	cmp	r1, #0
 8003868:	d044      	beq.n	80038f4 <_free_r+0x90>
 800386a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800386e:	9001      	str	r0, [sp, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	f1a1 0404 	sub.w	r4, r1, #4
 8003876:	bfb8      	it	lt
 8003878:	18e4      	addlt	r4, r4, r3
 800387a:	f000 f8df 	bl	8003a3c <__malloc_lock>
 800387e:	4a1e      	ldr	r2, [pc, #120]	; (80038f8 <_free_r+0x94>)
 8003880:	9801      	ldr	r0, [sp, #4]
 8003882:	6813      	ldr	r3, [r2, #0]
 8003884:	b933      	cbnz	r3, 8003894 <_free_r+0x30>
 8003886:	6063      	str	r3, [r4, #4]
 8003888:	6014      	str	r4, [r2, #0]
 800388a:	b003      	add	sp, #12
 800388c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003890:	f000 b8da 	b.w	8003a48 <__malloc_unlock>
 8003894:	42a3      	cmp	r3, r4
 8003896:	d908      	bls.n	80038aa <_free_r+0x46>
 8003898:	6825      	ldr	r5, [r4, #0]
 800389a:	1961      	adds	r1, r4, r5
 800389c:	428b      	cmp	r3, r1
 800389e:	bf01      	itttt	eq
 80038a0:	6819      	ldreq	r1, [r3, #0]
 80038a2:	685b      	ldreq	r3, [r3, #4]
 80038a4:	1949      	addeq	r1, r1, r5
 80038a6:	6021      	streq	r1, [r4, #0]
 80038a8:	e7ed      	b.n	8003886 <_free_r+0x22>
 80038aa:	461a      	mov	r2, r3
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	b10b      	cbz	r3, 80038b4 <_free_r+0x50>
 80038b0:	42a3      	cmp	r3, r4
 80038b2:	d9fa      	bls.n	80038aa <_free_r+0x46>
 80038b4:	6811      	ldr	r1, [r2, #0]
 80038b6:	1855      	adds	r5, r2, r1
 80038b8:	42a5      	cmp	r5, r4
 80038ba:	d10b      	bne.n	80038d4 <_free_r+0x70>
 80038bc:	6824      	ldr	r4, [r4, #0]
 80038be:	4421      	add	r1, r4
 80038c0:	1854      	adds	r4, r2, r1
 80038c2:	42a3      	cmp	r3, r4
 80038c4:	6011      	str	r1, [r2, #0]
 80038c6:	d1e0      	bne.n	800388a <_free_r+0x26>
 80038c8:	681c      	ldr	r4, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	6053      	str	r3, [r2, #4]
 80038ce:	440c      	add	r4, r1
 80038d0:	6014      	str	r4, [r2, #0]
 80038d2:	e7da      	b.n	800388a <_free_r+0x26>
 80038d4:	d902      	bls.n	80038dc <_free_r+0x78>
 80038d6:	230c      	movs	r3, #12
 80038d8:	6003      	str	r3, [r0, #0]
 80038da:	e7d6      	b.n	800388a <_free_r+0x26>
 80038dc:	6825      	ldr	r5, [r4, #0]
 80038de:	1961      	adds	r1, r4, r5
 80038e0:	428b      	cmp	r3, r1
 80038e2:	bf04      	itt	eq
 80038e4:	6819      	ldreq	r1, [r3, #0]
 80038e6:	685b      	ldreq	r3, [r3, #4]
 80038e8:	6063      	str	r3, [r4, #4]
 80038ea:	bf04      	itt	eq
 80038ec:	1949      	addeq	r1, r1, r5
 80038ee:	6021      	streq	r1, [r4, #0]
 80038f0:	6054      	str	r4, [r2, #4]
 80038f2:	e7ca      	b.n	800388a <_free_r+0x26>
 80038f4:	b003      	add	sp, #12
 80038f6:	bd30      	pop	{r4, r5, pc}
 80038f8:	20000370 	.word	0x20000370

080038fc <sbrk_aligned>:
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	4e0e      	ldr	r6, [pc, #56]	; (8003938 <sbrk_aligned+0x3c>)
 8003900:	460c      	mov	r4, r1
 8003902:	6831      	ldr	r1, [r6, #0]
 8003904:	4605      	mov	r5, r0
 8003906:	b911      	cbnz	r1, 800390e <sbrk_aligned+0x12>
 8003908:	f000 fcbc 	bl	8004284 <_sbrk_r>
 800390c:	6030      	str	r0, [r6, #0]
 800390e:	4621      	mov	r1, r4
 8003910:	4628      	mov	r0, r5
 8003912:	f000 fcb7 	bl	8004284 <_sbrk_r>
 8003916:	1c43      	adds	r3, r0, #1
 8003918:	d00a      	beq.n	8003930 <sbrk_aligned+0x34>
 800391a:	1cc4      	adds	r4, r0, #3
 800391c:	f024 0403 	bic.w	r4, r4, #3
 8003920:	42a0      	cmp	r0, r4
 8003922:	d007      	beq.n	8003934 <sbrk_aligned+0x38>
 8003924:	1a21      	subs	r1, r4, r0
 8003926:	4628      	mov	r0, r5
 8003928:	f000 fcac 	bl	8004284 <_sbrk_r>
 800392c:	3001      	adds	r0, #1
 800392e:	d101      	bne.n	8003934 <sbrk_aligned+0x38>
 8003930:	f04f 34ff 	mov.w	r4, #4294967295
 8003934:	4620      	mov	r0, r4
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	20000374 	.word	0x20000374

0800393c <_malloc_r>:
 800393c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003940:	1ccd      	adds	r5, r1, #3
 8003942:	f025 0503 	bic.w	r5, r5, #3
 8003946:	3508      	adds	r5, #8
 8003948:	2d0c      	cmp	r5, #12
 800394a:	bf38      	it	cc
 800394c:	250c      	movcc	r5, #12
 800394e:	2d00      	cmp	r5, #0
 8003950:	4607      	mov	r7, r0
 8003952:	db01      	blt.n	8003958 <_malloc_r+0x1c>
 8003954:	42a9      	cmp	r1, r5
 8003956:	d905      	bls.n	8003964 <_malloc_r+0x28>
 8003958:	230c      	movs	r3, #12
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	2600      	movs	r6, #0
 800395e:	4630      	mov	r0, r6
 8003960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003964:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a38 <_malloc_r+0xfc>
 8003968:	f000 f868 	bl	8003a3c <__malloc_lock>
 800396c:	f8d8 3000 	ldr.w	r3, [r8]
 8003970:	461c      	mov	r4, r3
 8003972:	bb5c      	cbnz	r4, 80039cc <_malloc_r+0x90>
 8003974:	4629      	mov	r1, r5
 8003976:	4638      	mov	r0, r7
 8003978:	f7ff ffc0 	bl	80038fc <sbrk_aligned>
 800397c:	1c43      	adds	r3, r0, #1
 800397e:	4604      	mov	r4, r0
 8003980:	d155      	bne.n	8003a2e <_malloc_r+0xf2>
 8003982:	f8d8 4000 	ldr.w	r4, [r8]
 8003986:	4626      	mov	r6, r4
 8003988:	2e00      	cmp	r6, #0
 800398a:	d145      	bne.n	8003a18 <_malloc_r+0xdc>
 800398c:	2c00      	cmp	r4, #0
 800398e:	d048      	beq.n	8003a22 <_malloc_r+0xe6>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	4631      	mov	r1, r6
 8003994:	4638      	mov	r0, r7
 8003996:	eb04 0903 	add.w	r9, r4, r3
 800399a:	f000 fc73 	bl	8004284 <_sbrk_r>
 800399e:	4581      	cmp	r9, r0
 80039a0:	d13f      	bne.n	8003a22 <_malloc_r+0xe6>
 80039a2:	6821      	ldr	r1, [r4, #0]
 80039a4:	1a6d      	subs	r5, r5, r1
 80039a6:	4629      	mov	r1, r5
 80039a8:	4638      	mov	r0, r7
 80039aa:	f7ff ffa7 	bl	80038fc <sbrk_aligned>
 80039ae:	3001      	adds	r0, #1
 80039b0:	d037      	beq.n	8003a22 <_malloc_r+0xe6>
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	442b      	add	r3, r5
 80039b6:	6023      	str	r3, [r4, #0]
 80039b8:	f8d8 3000 	ldr.w	r3, [r8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d038      	beq.n	8003a32 <_malloc_r+0xf6>
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	42a2      	cmp	r2, r4
 80039c4:	d12b      	bne.n	8003a1e <_malloc_r+0xe2>
 80039c6:	2200      	movs	r2, #0
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	e00f      	b.n	80039ec <_malloc_r+0xb0>
 80039cc:	6822      	ldr	r2, [r4, #0]
 80039ce:	1b52      	subs	r2, r2, r5
 80039d0:	d41f      	bmi.n	8003a12 <_malloc_r+0xd6>
 80039d2:	2a0b      	cmp	r2, #11
 80039d4:	d917      	bls.n	8003a06 <_malloc_r+0xca>
 80039d6:	1961      	adds	r1, r4, r5
 80039d8:	42a3      	cmp	r3, r4
 80039da:	6025      	str	r5, [r4, #0]
 80039dc:	bf18      	it	ne
 80039de:	6059      	strne	r1, [r3, #4]
 80039e0:	6863      	ldr	r3, [r4, #4]
 80039e2:	bf08      	it	eq
 80039e4:	f8c8 1000 	streq.w	r1, [r8]
 80039e8:	5162      	str	r2, [r4, r5]
 80039ea:	604b      	str	r3, [r1, #4]
 80039ec:	4638      	mov	r0, r7
 80039ee:	f104 060b 	add.w	r6, r4, #11
 80039f2:	f000 f829 	bl	8003a48 <__malloc_unlock>
 80039f6:	f026 0607 	bic.w	r6, r6, #7
 80039fa:	1d23      	adds	r3, r4, #4
 80039fc:	1af2      	subs	r2, r6, r3
 80039fe:	d0ae      	beq.n	800395e <_malloc_r+0x22>
 8003a00:	1b9b      	subs	r3, r3, r6
 8003a02:	50a3      	str	r3, [r4, r2]
 8003a04:	e7ab      	b.n	800395e <_malloc_r+0x22>
 8003a06:	42a3      	cmp	r3, r4
 8003a08:	6862      	ldr	r2, [r4, #4]
 8003a0a:	d1dd      	bne.n	80039c8 <_malloc_r+0x8c>
 8003a0c:	f8c8 2000 	str.w	r2, [r8]
 8003a10:	e7ec      	b.n	80039ec <_malloc_r+0xb0>
 8003a12:	4623      	mov	r3, r4
 8003a14:	6864      	ldr	r4, [r4, #4]
 8003a16:	e7ac      	b.n	8003972 <_malloc_r+0x36>
 8003a18:	4634      	mov	r4, r6
 8003a1a:	6876      	ldr	r6, [r6, #4]
 8003a1c:	e7b4      	b.n	8003988 <_malloc_r+0x4c>
 8003a1e:	4613      	mov	r3, r2
 8003a20:	e7cc      	b.n	80039bc <_malloc_r+0x80>
 8003a22:	230c      	movs	r3, #12
 8003a24:	603b      	str	r3, [r7, #0]
 8003a26:	4638      	mov	r0, r7
 8003a28:	f000 f80e 	bl	8003a48 <__malloc_unlock>
 8003a2c:	e797      	b.n	800395e <_malloc_r+0x22>
 8003a2e:	6025      	str	r5, [r4, #0]
 8003a30:	e7dc      	b.n	80039ec <_malloc_r+0xb0>
 8003a32:	605b      	str	r3, [r3, #4]
 8003a34:	deff      	udf	#255	; 0xff
 8003a36:	bf00      	nop
 8003a38:	20000370 	.word	0x20000370

08003a3c <__malloc_lock>:
 8003a3c:	4801      	ldr	r0, [pc, #4]	; (8003a44 <__malloc_lock+0x8>)
 8003a3e:	f7ff bf0e 	b.w	800385e <__retarget_lock_acquire_recursive>
 8003a42:	bf00      	nop
 8003a44:	2000036c 	.word	0x2000036c

08003a48 <__malloc_unlock>:
 8003a48:	4801      	ldr	r0, [pc, #4]	; (8003a50 <__malloc_unlock+0x8>)
 8003a4a:	f7ff bf09 	b.w	8003860 <__retarget_lock_release_recursive>
 8003a4e:	bf00      	nop
 8003a50:	2000036c 	.word	0x2000036c

08003a54 <__sfputc_r>:
 8003a54:	6893      	ldr	r3, [r2, #8]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	b410      	push	{r4}
 8003a5c:	6093      	str	r3, [r2, #8]
 8003a5e:	da08      	bge.n	8003a72 <__sfputc_r+0x1e>
 8003a60:	6994      	ldr	r4, [r2, #24]
 8003a62:	42a3      	cmp	r3, r4
 8003a64:	db01      	blt.n	8003a6a <__sfputc_r+0x16>
 8003a66:	290a      	cmp	r1, #10
 8003a68:	d103      	bne.n	8003a72 <__sfputc_r+0x1e>
 8003a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a6e:	f000 bb73 	b.w	8004158 <__swbuf_r>
 8003a72:	6813      	ldr	r3, [r2, #0]
 8003a74:	1c58      	adds	r0, r3, #1
 8003a76:	6010      	str	r0, [r2, #0]
 8003a78:	7019      	strb	r1, [r3, #0]
 8003a7a:	4608      	mov	r0, r1
 8003a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <__sfputs_r>:
 8003a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a84:	4606      	mov	r6, r0
 8003a86:	460f      	mov	r7, r1
 8003a88:	4614      	mov	r4, r2
 8003a8a:	18d5      	adds	r5, r2, r3
 8003a8c:	42ac      	cmp	r4, r5
 8003a8e:	d101      	bne.n	8003a94 <__sfputs_r+0x12>
 8003a90:	2000      	movs	r0, #0
 8003a92:	e007      	b.n	8003aa4 <__sfputs_r+0x22>
 8003a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a98:	463a      	mov	r2, r7
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	f7ff ffda 	bl	8003a54 <__sfputc_r>
 8003aa0:	1c43      	adds	r3, r0, #1
 8003aa2:	d1f3      	bne.n	8003a8c <__sfputs_r+0xa>
 8003aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003aa8 <_vfiprintf_r>:
 8003aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aac:	460d      	mov	r5, r1
 8003aae:	b09d      	sub	sp, #116	; 0x74
 8003ab0:	4614      	mov	r4, r2
 8003ab2:	4698      	mov	r8, r3
 8003ab4:	4606      	mov	r6, r0
 8003ab6:	b118      	cbz	r0, 8003ac0 <_vfiprintf_r+0x18>
 8003ab8:	6a03      	ldr	r3, [r0, #32]
 8003aba:	b90b      	cbnz	r3, 8003ac0 <_vfiprintf_r+0x18>
 8003abc:	f7ff fdca 	bl	8003654 <__sinit>
 8003ac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ac2:	07d9      	lsls	r1, r3, #31
 8003ac4:	d405      	bmi.n	8003ad2 <_vfiprintf_r+0x2a>
 8003ac6:	89ab      	ldrh	r3, [r5, #12]
 8003ac8:	059a      	lsls	r2, r3, #22
 8003aca:	d402      	bmi.n	8003ad2 <_vfiprintf_r+0x2a>
 8003acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ace:	f7ff fec6 	bl	800385e <__retarget_lock_acquire_recursive>
 8003ad2:	89ab      	ldrh	r3, [r5, #12]
 8003ad4:	071b      	lsls	r3, r3, #28
 8003ad6:	d501      	bpl.n	8003adc <_vfiprintf_r+0x34>
 8003ad8:	692b      	ldr	r3, [r5, #16]
 8003ada:	b99b      	cbnz	r3, 8003b04 <_vfiprintf_r+0x5c>
 8003adc:	4629      	mov	r1, r5
 8003ade:	4630      	mov	r0, r6
 8003ae0:	f000 fb78 	bl	80041d4 <__swsetup_r>
 8003ae4:	b170      	cbz	r0, 8003b04 <_vfiprintf_r+0x5c>
 8003ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ae8:	07dc      	lsls	r4, r3, #31
 8003aea:	d504      	bpl.n	8003af6 <_vfiprintf_r+0x4e>
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	b01d      	add	sp, #116	; 0x74
 8003af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003af6:	89ab      	ldrh	r3, [r5, #12]
 8003af8:	0598      	lsls	r0, r3, #22
 8003afa:	d4f7      	bmi.n	8003aec <_vfiprintf_r+0x44>
 8003afc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003afe:	f7ff feaf 	bl	8003860 <__retarget_lock_release_recursive>
 8003b02:	e7f3      	b.n	8003aec <_vfiprintf_r+0x44>
 8003b04:	2300      	movs	r3, #0
 8003b06:	9309      	str	r3, [sp, #36]	; 0x24
 8003b08:	2320      	movs	r3, #32
 8003b0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b12:	2330      	movs	r3, #48	; 0x30
 8003b14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003cc8 <_vfiprintf_r+0x220>
 8003b18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b1c:	f04f 0901 	mov.w	r9, #1
 8003b20:	4623      	mov	r3, r4
 8003b22:	469a      	mov	sl, r3
 8003b24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b28:	b10a      	cbz	r2, 8003b2e <_vfiprintf_r+0x86>
 8003b2a:	2a25      	cmp	r2, #37	; 0x25
 8003b2c:	d1f9      	bne.n	8003b22 <_vfiprintf_r+0x7a>
 8003b2e:	ebba 0b04 	subs.w	fp, sl, r4
 8003b32:	d00b      	beq.n	8003b4c <_vfiprintf_r+0xa4>
 8003b34:	465b      	mov	r3, fp
 8003b36:	4622      	mov	r2, r4
 8003b38:	4629      	mov	r1, r5
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	f7ff ffa1 	bl	8003a82 <__sfputs_r>
 8003b40:	3001      	adds	r0, #1
 8003b42:	f000 80a9 	beq.w	8003c98 <_vfiprintf_r+0x1f0>
 8003b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b48:	445a      	add	r2, fp
 8003b4a:	9209      	str	r2, [sp, #36]	; 0x24
 8003b4c:	f89a 3000 	ldrb.w	r3, [sl]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80a1 	beq.w	8003c98 <_vfiprintf_r+0x1f0>
 8003b56:	2300      	movs	r3, #0
 8003b58:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b60:	f10a 0a01 	add.w	sl, sl, #1
 8003b64:	9304      	str	r3, [sp, #16]
 8003b66:	9307      	str	r3, [sp, #28]
 8003b68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b6c:	931a      	str	r3, [sp, #104]	; 0x68
 8003b6e:	4654      	mov	r4, sl
 8003b70:	2205      	movs	r2, #5
 8003b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b76:	4854      	ldr	r0, [pc, #336]	; (8003cc8 <_vfiprintf_r+0x220>)
 8003b78:	f7fc fb32 	bl	80001e0 <memchr>
 8003b7c:	9a04      	ldr	r2, [sp, #16]
 8003b7e:	b9d8      	cbnz	r0, 8003bb8 <_vfiprintf_r+0x110>
 8003b80:	06d1      	lsls	r1, r2, #27
 8003b82:	bf44      	itt	mi
 8003b84:	2320      	movmi	r3, #32
 8003b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b8a:	0713      	lsls	r3, r2, #28
 8003b8c:	bf44      	itt	mi
 8003b8e:	232b      	movmi	r3, #43	; 0x2b
 8003b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b94:	f89a 3000 	ldrb.w	r3, [sl]
 8003b98:	2b2a      	cmp	r3, #42	; 0x2a
 8003b9a:	d015      	beq.n	8003bc8 <_vfiprintf_r+0x120>
 8003b9c:	9a07      	ldr	r2, [sp, #28]
 8003b9e:	4654      	mov	r4, sl
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	f04f 0c0a 	mov.w	ip, #10
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bac:	3b30      	subs	r3, #48	; 0x30
 8003bae:	2b09      	cmp	r3, #9
 8003bb0:	d94d      	bls.n	8003c4e <_vfiprintf_r+0x1a6>
 8003bb2:	b1b0      	cbz	r0, 8003be2 <_vfiprintf_r+0x13a>
 8003bb4:	9207      	str	r2, [sp, #28]
 8003bb6:	e014      	b.n	8003be2 <_vfiprintf_r+0x13a>
 8003bb8:	eba0 0308 	sub.w	r3, r0, r8
 8003bbc:	fa09 f303 	lsl.w	r3, r9, r3
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	9304      	str	r3, [sp, #16]
 8003bc4:	46a2      	mov	sl, r4
 8003bc6:	e7d2      	b.n	8003b6e <_vfiprintf_r+0xc6>
 8003bc8:	9b03      	ldr	r3, [sp, #12]
 8003bca:	1d19      	adds	r1, r3, #4
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	9103      	str	r1, [sp, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	bfbb      	ittet	lt
 8003bd4:	425b      	neglt	r3, r3
 8003bd6:	f042 0202 	orrlt.w	r2, r2, #2
 8003bda:	9307      	strge	r3, [sp, #28]
 8003bdc:	9307      	strlt	r3, [sp, #28]
 8003bde:	bfb8      	it	lt
 8003be0:	9204      	strlt	r2, [sp, #16]
 8003be2:	7823      	ldrb	r3, [r4, #0]
 8003be4:	2b2e      	cmp	r3, #46	; 0x2e
 8003be6:	d10c      	bne.n	8003c02 <_vfiprintf_r+0x15a>
 8003be8:	7863      	ldrb	r3, [r4, #1]
 8003bea:	2b2a      	cmp	r3, #42	; 0x2a
 8003bec:	d134      	bne.n	8003c58 <_vfiprintf_r+0x1b0>
 8003bee:	9b03      	ldr	r3, [sp, #12]
 8003bf0:	1d1a      	adds	r2, r3, #4
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	9203      	str	r2, [sp, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bfb8      	it	lt
 8003bfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bfe:	3402      	adds	r4, #2
 8003c00:	9305      	str	r3, [sp, #20]
 8003c02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003cd8 <_vfiprintf_r+0x230>
 8003c06:	7821      	ldrb	r1, [r4, #0]
 8003c08:	2203      	movs	r2, #3
 8003c0a:	4650      	mov	r0, sl
 8003c0c:	f7fc fae8 	bl	80001e0 <memchr>
 8003c10:	b138      	cbz	r0, 8003c22 <_vfiprintf_r+0x17a>
 8003c12:	9b04      	ldr	r3, [sp, #16]
 8003c14:	eba0 000a 	sub.w	r0, r0, sl
 8003c18:	2240      	movs	r2, #64	; 0x40
 8003c1a:	4082      	lsls	r2, r0
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	3401      	adds	r4, #1
 8003c20:	9304      	str	r3, [sp, #16]
 8003c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c26:	4829      	ldr	r0, [pc, #164]	; (8003ccc <_vfiprintf_r+0x224>)
 8003c28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c2c:	2206      	movs	r2, #6
 8003c2e:	f7fc fad7 	bl	80001e0 <memchr>
 8003c32:	2800      	cmp	r0, #0
 8003c34:	d03f      	beq.n	8003cb6 <_vfiprintf_r+0x20e>
 8003c36:	4b26      	ldr	r3, [pc, #152]	; (8003cd0 <_vfiprintf_r+0x228>)
 8003c38:	bb1b      	cbnz	r3, 8003c82 <_vfiprintf_r+0x1da>
 8003c3a:	9b03      	ldr	r3, [sp, #12]
 8003c3c:	3307      	adds	r3, #7
 8003c3e:	f023 0307 	bic.w	r3, r3, #7
 8003c42:	3308      	adds	r3, #8
 8003c44:	9303      	str	r3, [sp, #12]
 8003c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c48:	443b      	add	r3, r7
 8003c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c4c:	e768      	b.n	8003b20 <_vfiprintf_r+0x78>
 8003c4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c52:	460c      	mov	r4, r1
 8003c54:	2001      	movs	r0, #1
 8003c56:	e7a6      	b.n	8003ba6 <_vfiprintf_r+0xfe>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	3401      	adds	r4, #1
 8003c5c:	9305      	str	r3, [sp, #20]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f04f 0c0a 	mov.w	ip, #10
 8003c64:	4620      	mov	r0, r4
 8003c66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c6a:	3a30      	subs	r2, #48	; 0x30
 8003c6c:	2a09      	cmp	r2, #9
 8003c6e:	d903      	bls.n	8003c78 <_vfiprintf_r+0x1d0>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0c6      	beq.n	8003c02 <_vfiprintf_r+0x15a>
 8003c74:	9105      	str	r1, [sp, #20]
 8003c76:	e7c4      	b.n	8003c02 <_vfiprintf_r+0x15a>
 8003c78:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e7f0      	b.n	8003c64 <_vfiprintf_r+0x1bc>
 8003c82:	ab03      	add	r3, sp, #12
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	462a      	mov	r2, r5
 8003c88:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <_vfiprintf_r+0x22c>)
 8003c8a:	a904      	add	r1, sp, #16
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	f3af 8000 	nop.w
 8003c92:	4607      	mov	r7, r0
 8003c94:	1c78      	adds	r0, r7, #1
 8003c96:	d1d6      	bne.n	8003c46 <_vfiprintf_r+0x19e>
 8003c98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c9a:	07d9      	lsls	r1, r3, #31
 8003c9c:	d405      	bmi.n	8003caa <_vfiprintf_r+0x202>
 8003c9e:	89ab      	ldrh	r3, [r5, #12]
 8003ca0:	059a      	lsls	r2, r3, #22
 8003ca2:	d402      	bmi.n	8003caa <_vfiprintf_r+0x202>
 8003ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ca6:	f7ff fddb 	bl	8003860 <__retarget_lock_release_recursive>
 8003caa:	89ab      	ldrh	r3, [r5, #12]
 8003cac:	065b      	lsls	r3, r3, #25
 8003cae:	f53f af1d 	bmi.w	8003aec <_vfiprintf_r+0x44>
 8003cb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cb4:	e71c      	b.n	8003af0 <_vfiprintf_r+0x48>
 8003cb6:	ab03      	add	r3, sp, #12
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	462a      	mov	r2, r5
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <_vfiprintf_r+0x22c>)
 8003cbe:	a904      	add	r1, sp, #16
 8003cc0:	4630      	mov	r0, r6
 8003cc2:	f000 f879 	bl	8003db8 <_printf_i>
 8003cc6:	e7e4      	b.n	8003c92 <_vfiprintf_r+0x1ea>
 8003cc8:	080043e8 	.word	0x080043e8
 8003ccc:	080043f2 	.word	0x080043f2
 8003cd0:	00000000 	.word	0x00000000
 8003cd4:	08003a83 	.word	0x08003a83
 8003cd8:	080043ee 	.word	0x080043ee

08003cdc <_printf_common>:
 8003cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce0:	4616      	mov	r6, r2
 8003ce2:	4699      	mov	r9, r3
 8003ce4:	688a      	ldr	r2, [r1, #8]
 8003ce6:	690b      	ldr	r3, [r1, #16]
 8003ce8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cec:	4293      	cmp	r3, r2
 8003cee:	bfb8      	it	lt
 8003cf0:	4613      	movlt	r3, r2
 8003cf2:	6033      	str	r3, [r6, #0]
 8003cf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cf8:	4607      	mov	r7, r0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	b10a      	cbz	r2, 8003d02 <_printf_common+0x26>
 8003cfe:	3301      	adds	r3, #1
 8003d00:	6033      	str	r3, [r6, #0]
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	0699      	lsls	r1, r3, #26
 8003d06:	bf42      	ittt	mi
 8003d08:	6833      	ldrmi	r3, [r6, #0]
 8003d0a:	3302      	addmi	r3, #2
 8003d0c:	6033      	strmi	r3, [r6, #0]
 8003d0e:	6825      	ldr	r5, [r4, #0]
 8003d10:	f015 0506 	ands.w	r5, r5, #6
 8003d14:	d106      	bne.n	8003d24 <_printf_common+0x48>
 8003d16:	f104 0a19 	add.w	sl, r4, #25
 8003d1a:	68e3      	ldr	r3, [r4, #12]
 8003d1c:	6832      	ldr	r2, [r6, #0]
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	42ab      	cmp	r3, r5
 8003d22:	dc26      	bgt.n	8003d72 <_printf_common+0x96>
 8003d24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d28:	1e13      	subs	r3, r2, #0
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	bf18      	it	ne
 8003d2e:	2301      	movne	r3, #1
 8003d30:	0692      	lsls	r2, r2, #26
 8003d32:	d42b      	bmi.n	8003d8c <_printf_common+0xb0>
 8003d34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d38:	4649      	mov	r1, r9
 8003d3a:	4638      	mov	r0, r7
 8003d3c:	47c0      	blx	r8
 8003d3e:	3001      	adds	r0, #1
 8003d40:	d01e      	beq.n	8003d80 <_printf_common+0xa4>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	6922      	ldr	r2, [r4, #16]
 8003d46:	f003 0306 	and.w	r3, r3, #6
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	bf02      	ittt	eq
 8003d4e:	68e5      	ldreq	r5, [r4, #12]
 8003d50:	6833      	ldreq	r3, [r6, #0]
 8003d52:	1aed      	subeq	r5, r5, r3
 8003d54:	68a3      	ldr	r3, [r4, #8]
 8003d56:	bf0c      	ite	eq
 8003d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d5c:	2500      	movne	r5, #0
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	bfc4      	itt	gt
 8003d62:	1a9b      	subgt	r3, r3, r2
 8003d64:	18ed      	addgt	r5, r5, r3
 8003d66:	2600      	movs	r6, #0
 8003d68:	341a      	adds	r4, #26
 8003d6a:	42b5      	cmp	r5, r6
 8003d6c:	d11a      	bne.n	8003da4 <_printf_common+0xc8>
 8003d6e:	2000      	movs	r0, #0
 8003d70:	e008      	b.n	8003d84 <_printf_common+0xa8>
 8003d72:	2301      	movs	r3, #1
 8003d74:	4652      	mov	r2, sl
 8003d76:	4649      	mov	r1, r9
 8003d78:	4638      	mov	r0, r7
 8003d7a:	47c0      	blx	r8
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	d103      	bne.n	8003d88 <_printf_common+0xac>
 8003d80:	f04f 30ff 	mov.w	r0, #4294967295
 8003d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d88:	3501      	adds	r5, #1
 8003d8a:	e7c6      	b.n	8003d1a <_printf_common+0x3e>
 8003d8c:	18e1      	adds	r1, r4, r3
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	2030      	movs	r0, #48	; 0x30
 8003d92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d96:	4422      	add	r2, r4
 8003d98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003da0:	3302      	adds	r3, #2
 8003da2:	e7c7      	b.n	8003d34 <_printf_common+0x58>
 8003da4:	2301      	movs	r3, #1
 8003da6:	4622      	mov	r2, r4
 8003da8:	4649      	mov	r1, r9
 8003daa:	4638      	mov	r0, r7
 8003dac:	47c0      	blx	r8
 8003dae:	3001      	adds	r0, #1
 8003db0:	d0e6      	beq.n	8003d80 <_printf_common+0xa4>
 8003db2:	3601      	adds	r6, #1
 8003db4:	e7d9      	b.n	8003d6a <_printf_common+0x8e>
	...

08003db8 <_printf_i>:
 8003db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dbc:	7e0f      	ldrb	r7, [r1, #24]
 8003dbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003dc0:	2f78      	cmp	r7, #120	; 0x78
 8003dc2:	4691      	mov	r9, r2
 8003dc4:	4680      	mov	r8, r0
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	469a      	mov	sl, r3
 8003dca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003dce:	d807      	bhi.n	8003de0 <_printf_i+0x28>
 8003dd0:	2f62      	cmp	r7, #98	; 0x62
 8003dd2:	d80a      	bhi.n	8003dea <_printf_i+0x32>
 8003dd4:	2f00      	cmp	r7, #0
 8003dd6:	f000 80d4 	beq.w	8003f82 <_printf_i+0x1ca>
 8003dda:	2f58      	cmp	r7, #88	; 0x58
 8003ddc:	f000 80c0 	beq.w	8003f60 <_printf_i+0x1a8>
 8003de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003de4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003de8:	e03a      	b.n	8003e60 <_printf_i+0xa8>
 8003dea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dee:	2b15      	cmp	r3, #21
 8003df0:	d8f6      	bhi.n	8003de0 <_printf_i+0x28>
 8003df2:	a101      	add	r1, pc, #4	; (adr r1, 8003df8 <_printf_i+0x40>)
 8003df4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003df8:	08003e51 	.word	0x08003e51
 8003dfc:	08003e65 	.word	0x08003e65
 8003e00:	08003de1 	.word	0x08003de1
 8003e04:	08003de1 	.word	0x08003de1
 8003e08:	08003de1 	.word	0x08003de1
 8003e0c:	08003de1 	.word	0x08003de1
 8003e10:	08003e65 	.word	0x08003e65
 8003e14:	08003de1 	.word	0x08003de1
 8003e18:	08003de1 	.word	0x08003de1
 8003e1c:	08003de1 	.word	0x08003de1
 8003e20:	08003de1 	.word	0x08003de1
 8003e24:	08003f69 	.word	0x08003f69
 8003e28:	08003e91 	.word	0x08003e91
 8003e2c:	08003f23 	.word	0x08003f23
 8003e30:	08003de1 	.word	0x08003de1
 8003e34:	08003de1 	.word	0x08003de1
 8003e38:	08003f8b 	.word	0x08003f8b
 8003e3c:	08003de1 	.word	0x08003de1
 8003e40:	08003e91 	.word	0x08003e91
 8003e44:	08003de1 	.word	0x08003de1
 8003e48:	08003de1 	.word	0x08003de1
 8003e4c:	08003f2b 	.word	0x08003f2b
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	1d1a      	adds	r2, r3, #4
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	602a      	str	r2, [r5, #0]
 8003e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e60:	2301      	movs	r3, #1
 8003e62:	e09f      	b.n	8003fa4 <_printf_i+0x1ec>
 8003e64:	6820      	ldr	r0, [r4, #0]
 8003e66:	682b      	ldr	r3, [r5, #0]
 8003e68:	0607      	lsls	r7, r0, #24
 8003e6a:	f103 0104 	add.w	r1, r3, #4
 8003e6e:	6029      	str	r1, [r5, #0]
 8003e70:	d501      	bpl.n	8003e76 <_printf_i+0xbe>
 8003e72:	681e      	ldr	r6, [r3, #0]
 8003e74:	e003      	b.n	8003e7e <_printf_i+0xc6>
 8003e76:	0646      	lsls	r6, r0, #25
 8003e78:	d5fb      	bpl.n	8003e72 <_printf_i+0xba>
 8003e7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e7e:	2e00      	cmp	r6, #0
 8003e80:	da03      	bge.n	8003e8a <_printf_i+0xd2>
 8003e82:	232d      	movs	r3, #45	; 0x2d
 8003e84:	4276      	negs	r6, r6
 8003e86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e8a:	485a      	ldr	r0, [pc, #360]	; (8003ff4 <_printf_i+0x23c>)
 8003e8c:	230a      	movs	r3, #10
 8003e8e:	e012      	b.n	8003eb6 <_printf_i+0xfe>
 8003e90:	682b      	ldr	r3, [r5, #0]
 8003e92:	6820      	ldr	r0, [r4, #0]
 8003e94:	1d19      	adds	r1, r3, #4
 8003e96:	6029      	str	r1, [r5, #0]
 8003e98:	0605      	lsls	r5, r0, #24
 8003e9a:	d501      	bpl.n	8003ea0 <_printf_i+0xe8>
 8003e9c:	681e      	ldr	r6, [r3, #0]
 8003e9e:	e002      	b.n	8003ea6 <_printf_i+0xee>
 8003ea0:	0641      	lsls	r1, r0, #25
 8003ea2:	d5fb      	bpl.n	8003e9c <_printf_i+0xe4>
 8003ea4:	881e      	ldrh	r6, [r3, #0]
 8003ea6:	4853      	ldr	r0, [pc, #332]	; (8003ff4 <_printf_i+0x23c>)
 8003ea8:	2f6f      	cmp	r7, #111	; 0x6f
 8003eaa:	bf0c      	ite	eq
 8003eac:	2308      	moveq	r3, #8
 8003eae:	230a      	movne	r3, #10
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003eb6:	6865      	ldr	r5, [r4, #4]
 8003eb8:	60a5      	str	r5, [r4, #8]
 8003eba:	2d00      	cmp	r5, #0
 8003ebc:	bfa2      	ittt	ge
 8003ebe:	6821      	ldrge	r1, [r4, #0]
 8003ec0:	f021 0104 	bicge.w	r1, r1, #4
 8003ec4:	6021      	strge	r1, [r4, #0]
 8003ec6:	b90e      	cbnz	r6, 8003ecc <_printf_i+0x114>
 8003ec8:	2d00      	cmp	r5, #0
 8003eca:	d04b      	beq.n	8003f64 <_printf_i+0x1ac>
 8003ecc:	4615      	mov	r5, r2
 8003ece:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ed2:	fb03 6711 	mls	r7, r3, r1, r6
 8003ed6:	5dc7      	ldrb	r7, [r0, r7]
 8003ed8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003edc:	4637      	mov	r7, r6
 8003ede:	42bb      	cmp	r3, r7
 8003ee0:	460e      	mov	r6, r1
 8003ee2:	d9f4      	bls.n	8003ece <_printf_i+0x116>
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d10b      	bne.n	8003f00 <_printf_i+0x148>
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	07de      	lsls	r6, r3, #31
 8003eec:	d508      	bpl.n	8003f00 <_printf_i+0x148>
 8003eee:	6923      	ldr	r3, [r4, #16]
 8003ef0:	6861      	ldr	r1, [r4, #4]
 8003ef2:	4299      	cmp	r1, r3
 8003ef4:	bfde      	ittt	le
 8003ef6:	2330      	movle	r3, #48	; 0x30
 8003ef8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003efc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f00:	1b52      	subs	r2, r2, r5
 8003f02:	6122      	str	r2, [r4, #16]
 8003f04:	f8cd a000 	str.w	sl, [sp]
 8003f08:	464b      	mov	r3, r9
 8003f0a:	aa03      	add	r2, sp, #12
 8003f0c:	4621      	mov	r1, r4
 8003f0e:	4640      	mov	r0, r8
 8003f10:	f7ff fee4 	bl	8003cdc <_printf_common>
 8003f14:	3001      	adds	r0, #1
 8003f16:	d14a      	bne.n	8003fae <_printf_i+0x1f6>
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	b004      	add	sp, #16
 8003f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	f043 0320 	orr.w	r3, r3, #32
 8003f28:	6023      	str	r3, [r4, #0]
 8003f2a:	4833      	ldr	r0, [pc, #204]	; (8003ff8 <_printf_i+0x240>)
 8003f2c:	2778      	movs	r7, #120	; 0x78
 8003f2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	6829      	ldr	r1, [r5, #0]
 8003f36:	061f      	lsls	r7, r3, #24
 8003f38:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f3c:	d402      	bmi.n	8003f44 <_printf_i+0x18c>
 8003f3e:	065f      	lsls	r7, r3, #25
 8003f40:	bf48      	it	mi
 8003f42:	b2b6      	uxthmi	r6, r6
 8003f44:	07df      	lsls	r7, r3, #31
 8003f46:	bf48      	it	mi
 8003f48:	f043 0320 	orrmi.w	r3, r3, #32
 8003f4c:	6029      	str	r1, [r5, #0]
 8003f4e:	bf48      	it	mi
 8003f50:	6023      	strmi	r3, [r4, #0]
 8003f52:	b91e      	cbnz	r6, 8003f5c <_printf_i+0x1a4>
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	f023 0320 	bic.w	r3, r3, #32
 8003f5a:	6023      	str	r3, [r4, #0]
 8003f5c:	2310      	movs	r3, #16
 8003f5e:	e7a7      	b.n	8003eb0 <_printf_i+0xf8>
 8003f60:	4824      	ldr	r0, [pc, #144]	; (8003ff4 <_printf_i+0x23c>)
 8003f62:	e7e4      	b.n	8003f2e <_printf_i+0x176>
 8003f64:	4615      	mov	r5, r2
 8003f66:	e7bd      	b.n	8003ee4 <_printf_i+0x12c>
 8003f68:	682b      	ldr	r3, [r5, #0]
 8003f6a:	6826      	ldr	r6, [r4, #0]
 8003f6c:	6961      	ldr	r1, [r4, #20]
 8003f6e:	1d18      	adds	r0, r3, #4
 8003f70:	6028      	str	r0, [r5, #0]
 8003f72:	0635      	lsls	r5, r6, #24
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	d501      	bpl.n	8003f7c <_printf_i+0x1c4>
 8003f78:	6019      	str	r1, [r3, #0]
 8003f7a:	e002      	b.n	8003f82 <_printf_i+0x1ca>
 8003f7c:	0670      	lsls	r0, r6, #25
 8003f7e:	d5fb      	bpl.n	8003f78 <_printf_i+0x1c0>
 8003f80:	8019      	strh	r1, [r3, #0]
 8003f82:	2300      	movs	r3, #0
 8003f84:	6123      	str	r3, [r4, #16]
 8003f86:	4615      	mov	r5, r2
 8003f88:	e7bc      	b.n	8003f04 <_printf_i+0x14c>
 8003f8a:	682b      	ldr	r3, [r5, #0]
 8003f8c:	1d1a      	adds	r2, r3, #4
 8003f8e:	602a      	str	r2, [r5, #0]
 8003f90:	681d      	ldr	r5, [r3, #0]
 8003f92:	6862      	ldr	r2, [r4, #4]
 8003f94:	2100      	movs	r1, #0
 8003f96:	4628      	mov	r0, r5
 8003f98:	f7fc f922 	bl	80001e0 <memchr>
 8003f9c:	b108      	cbz	r0, 8003fa2 <_printf_i+0x1ea>
 8003f9e:	1b40      	subs	r0, r0, r5
 8003fa0:	6060      	str	r0, [r4, #4]
 8003fa2:	6863      	ldr	r3, [r4, #4]
 8003fa4:	6123      	str	r3, [r4, #16]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fac:	e7aa      	b.n	8003f04 <_printf_i+0x14c>
 8003fae:	6923      	ldr	r3, [r4, #16]
 8003fb0:	462a      	mov	r2, r5
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	4640      	mov	r0, r8
 8003fb6:	47d0      	blx	sl
 8003fb8:	3001      	adds	r0, #1
 8003fba:	d0ad      	beq.n	8003f18 <_printf_i+0x160>
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	079b      	lsls	r3, r3, #30
 8003fc0:	d413      	bmi.n	8003fea <_printf_i+0x232>
 8003fc2:	68e0      	ldr	r0, [r4, #12]
 8003fc4:	9b03      	ldr	r3, [sp, #12]
 8003fc6:	4298      	cmp	r0, r3
 8003fc8:	bfb8      	it	lt
 8003fca:	4618      	movlt	r0, r3
 8003fcc:	e7a6      	b.n	8003f1c <_printf_i+0x164>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	4632      	mov	r2, r6
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	4640      	mov	r0, r8
 8003fd6:	47d0      	blx	sl
 8003fd8:	3001      	adds	r0, #1
 8003fda:	d09d      	beq.n	8003f18 <_printf_i+0x160>
 8003fdc:	3501      	adds	r5, #1
 8003fde:	68e3      	ldr	r3, [r4, #12]
 8003fe0:	9903      	ldr	r1, [sp, #12]
 8003fe2:	1a5b      	subs	r3, r3, r1
 8003fe4:	42ab      	cmp	r3, r5
 8003fe6:	dcf2      	bgt.n	8003fce <_printf_i+0x216>
 8003fe8:	e7eb      	b.n	8003fc2 <_printf_i+0x20a>
 8003fea:	2500      	movs	r5, #0
 8003fec:	f104 0619 	add.w	r6, r4, #25
 8003ff0:	e7f5      	b.n	8003fde <_printf_i+0x226>
 8003ff2:	bf00      	nop
 8003ff4:	080043f9 	.word	0x080043f9
 8003ff8:	0800440a 	.word	0x0800440a

08003ffc <__sflush_r>:
 8003ffc:	898a      	ldrh	r2, [r1, #12]
 8003ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004002:	4605      	mov	r5, r0
 8004004:	0710      	lsls	r0, r2, #28
 8004006:	460c      	mov	r4, r1
 8004008:	d458      	bmi.n	80040bc <__sflush_r+0xc0>
 800400a:	684b      	ldr	r3, [r1, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	dc05      	bgt.n	800401c <__sflush_r+0x20>
 8004010:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	dc02      	bgt.n	800401c <__sflush_r+0x20>
 8004016:	2000      	movs	r0, #0
 8004018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800401c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800401e:	2e00      	cmp	r6, #0
 8004020:	d0f9      	beq.n	8004016 <__sflush_r+0x1a>
 8004022:	2300      	movs	r3, #0
 8004024:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004028:	682f      	ldr	r7, [r5, #0]
 800402a:	6a21      	ldr	r1, [r4, #32]
 800402c:	602b      	str	r3, [r5, #0]
 800402e:	d032      	beq.n	8004096 <__sflush_r+0x9a>
 8004030:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004032:	89a3      	ldrh	r3, [r4, #12]
 8004034:	075a      	lsls	r2, r3, #29
 8004036:	d505      	bpl.n	8004044 <__sflush_r+0x48>
 8004038:	6863      	ldr	r3, [r4, #4]
 800403a:	1ac0      	subs	r0, r0, r3
 800403c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800403e:	b10b      	cbz	r3, 8004044 <__sflush_r+0x48>
 8004040:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004042:	1ac0      	subs	r0, r0, r3
 8004044:	2300      	movs	r3, #0
 8004046:	4602      	mov	r2, r0
 8004048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800404a:	6a21      	ldr	r1, [r4, #32]
 800404c:	4628      	mov	r0, r5
 800404e:	47b0      	blx	r6
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	89a3      	ldrh	r3, [r4, #12]
 8004054:	d106      	bne.n	8004064 <__sflush_r+0x68>
 8004056:	6829      	ldr	r1, [r5, #0]
 8004058:	291d      	cmp	r1, #29
 800405a:	d82b      	bhi.n	80040b4 <__sflush_r+0xb8>
 800405c:	4a29      	ldr	r2, [pc, #164]	; (8004104 <__sflush_r+0x108>)
 800405e:	410a      	asrs	r2, r1
 8004060:	07d6      	lsls	r6, r2, #31
 8004062:	d427      	bmi.n	80040b4 <__sflush_r+0xb8>
 8004064:	2200      	movs	r2, #0
 8004066:	6062      	str	r2, [r4, #4]
 8004068:	04d9      	lsls	r1, r3, #19
 800406a:	6922      	ldr	r2, [r4, #16]
 800406c:	6022      	str	r2, [r4, #0]
 800406e:	d504      	bpl.n	800407a <__sflush_r+0x7e>
 8004070:	1c42      	adds	r2, r0, #1
 8004072:	d101      	bne.n	8004078 <__sflush_r+0x7c>
 8004074:	682b      	ldr	r3, [r5, #0]
 8004076:	b903      	cbnz	r3, 800407a <__sflush_r+0x7e>
 8004078:	6560      	str	r0, [r4, #84]	; 0x54
 800407a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800407c:	602f      	str	r7, [r5, #0]
 800407e:	2900      	cmp	r1, #0
 8004080:	d0c9      	beq.n	8004016 <__sflush_r+0x1a>
 8004082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004086:	4299      	cmp	r1, r3
 8004088:	d002      	beq.n	8004090 <__sflush_r+0x94>
 800408a:	4628      	mov	r0, r5
 800408c:	f7ff fbea 	bl	8003864 <_free_r>
 8004090:	2000      	movs	r0, #0
 8004092:	6360      	str	r0, [r4, #52]	; 0x34
 8004094:	e7c0      	b.n	8004018 <__sflush_r+0x1c>
 8004096:	2301      	movs	r3, #1
 8004098:	4628      	mov	r0, r5
 800409a:	47b0      	blx	r6
 800409c:	1c41      	adds	r1, r0, #1
 800409e:	d1c8      	bne.n	8004032 <__sflush_r+0x36>
 80040a0:	682b      	ldr	r3, [r5, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0c5      	beq.n	8004032 <__sflush_r+0x36>
 80040a6:	2b1d      	cmp	r3, #29
 80040a8:	d001      	beq.n	80040ae <__sflush_r+0xb2>
 80040aa:	2b16      	cmp	r3, #22
 80040ac:	d101      	bne.n	80040b2 <__sflush_r+0xb6>
 80040ae:	602f      	str	r7, [r5, #0]
 80040b0:	e7b1      	b.n	8004016 <__sflush_r+0x1a>
 80040b2:	89a3      	ldrh	r3, [r4, #12]
 80040b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b8:	81a3      	strh	r3, [r4, #12]
 80040ba:	e7ad      	b.n	8004018 <__sflush_r+0x1c>
 80040bc:	690f      	ldr	r7, [r1, #16]
 80040be:	2f00      	cmp	r7, #0
 80040c0:	d0a9      	beq.n	8004016 <__sflush_r+0x1a>
 80040c2:	0793      	lsls	r3, r2, #30
 80040c4:	680e      	ldr	r6, [r1, #0]
 80040c6:	bf08      	it	eq
 80040c8:	694b      	ldreq	r3, [r1, #20]
 80040ca:	600f      	str	r7, [r1, #0]
 80040cc:	bf18      	it	ne
 80040ce:	2300      	movne	r3, #0
 80040d0:	eba6 0807 	sub.w	r8, r6, r7
 80040d4:	608b      	str	r3, [r1, #8]
 80040d6:	f1b8 0f00 	cmp.w	r8, #0
 80040da:	dd9c      	ble.n	8004016 <__sflush_r+0x1a>
 80040dc:	6a21      	ldr	r1, [r4, #32]
 80040de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040e0:	4643      	mov	r3, r8
 80040e2:	463a      	mov	r2, r7
 80040e4:	4628      	mov	r0, r5
 80040e6:	47b0      	blx	r6
 80040e8:	2800      	cmp	r0, #0
 80040ea:	dc06      	bgt.n	80040fa <__sflush_r+0xfe>
 80040ec:	89a3      	ldrh	r3, [r4, #12]
 80040ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f2:	81a3      	strh	r3, [r4, #12]
 80040f4:	f04f 30ff 	mov.w	r0, #4294967295
 80040f8:	e78e      	b.n	8004018 <__sflush_r+0x1c>
 80040fa:	4407      	add	r7, r0
 80040fc:	eba8 0800 	sub.w	r8, r8, r0
 8004100:	e7e9      	b.n	80040d6 <__sflush_r+0xda>
 8004102:	bf00      	nop
 8004104:	dfbffffe 	.word	0xdfbffffe

08004108 <_fflush_r>:
 8004108:	b538      	push	{r3, r4, r5, lr}
 800410a:	690b      	ldr	r3, [r1, #16]
 800410c:	4605      	mov	r5, r0
 800410e:	460c      	mov	r4, r1
 8004110:	b913      	cbnz	r3, 8004118 <_fflush_r+0x10>
 8004112:	2500      	movs	r5, #0
 8004114:	4628      	mov	r0, r5
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	b118      	cbz	r0, 8004122 <_fflush_r+0x1a>
 800411a:	6a03      	ldr	r3, [r0, #32]
 800411c:	b90b      	cbnz	r3, 8004122 <_fflush_r+0x1a>
 800411e:	f7ff fa99 	bl	8003654 <__sinit>
 8004122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f3      	beq.n	8004112 <_fflush_r+0xa>
 800412a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800412c:	07d0      	lsls	r0, r2, #31
 800412e:	d404      	bmi.n	800413a <_fflush_r+0x32>
 8004130:	0599      	lsls	r1, r3, #22
 8004132:	d402      	bmi.n	800413a <_fflush_r+0x32>
 8004134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004136:	f7ff fb92 	bl	800385e <__retarget_lock_acquire_recursive>
 800413a:	4628      	mov	r0, r5
 800413c:	4621      	mov	r1, r4
 800413e:	f7ff ff5d 	bl	8003ffc <__sflush_r>
 8004142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004144:	07da      	lsls	r2, r3, #31
 8004146:	4605      	mov	r5, r0
 8004148:	d4e4      	bmi.n	8004114 <_fflush_r+0xc>
 800414a:	89a3      	ldrh	r3, [r4, #12]
 800414c:	059b      	lsls	r3, r3, #22
 800414e:	d4e1      	bmi.n	8004114 <_fflush_r+0xc>
 8004150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004152:	f7ff fb85 	bl	8003860 <__retarget_lock_release_recursive>
 8004156:	e7dd      	b.n	8004114 <_fflush_r+0xc>

08004158 <__swbuf_r>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	460e      	mov	r6, r1
 800415c:	4614      	mov	r4, r2
 800415e:	4605      	mov	r5, r0
 8004160:	b118      	cbz	r0, 800416a <__swbuf_r+0x12>
 8004162:	6a03      	ldr	r3, [r0, #32]
 8004164:	b90b      	cbnz	r3, 800416a <__swbuf_r+0x12>
 8004166:	f7ff fa75 	bl	8003654 <__sinit>
 800416a:	69a3      	ldr	r3, [r4, #24]
 800416c:	60a3      	str	r3, [r4, #8]
 800416e:	89a3      	ldrh	r3, [r4, #12]
 8004170:	071a      	lsls	r2, r3, #28
 8004172:	d525      	bpl.n	80041c0 <__swbuf_r+0x68>
 8004174:	6923      	ldr	r3, [r4, #16]
 8004176:	b31b      	cbz	r3, 80041c0 <__swbuf_r+0x68>
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	6922      	ldr	r2, [r4, #16]
 800417c:	1a98      	subs	r0, r3, r2
 800417e:	6963      	ldr	r3, [r4, #20]
 8004180:	b2f6      	uxtb	r6, r6
 8004182:	4283      	cmp	r3, r0
 8004184:	4637      	mov	r7, r6
 8004186:	dc04      	bgt.n	8004192 <__swbuf_r+0x3a>
 8004188:	4621      	mov	r1, r4
 800418a:	4628      	mov	r0, r5
 800418c:	f7ff ffbc 	bl	8004108 <_fflush_r>
 8004190:	b9e0      	cbnz	r0, 80041cc <__swbuf_r+0x74>
 8004192:	68a3      	ldr	r3, [r4, #8]
 8004194:	3b01      	subs	r3, #1
 8004196:	60a3      	str	r3, [r4, #8]
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	6022      	str	r2, [r4, #0]
 800419e:	701e      	strb	r6, [r3, #0]
 80041a0:	6962      	ldr	r2, [r4, #20]
 80041a2:	1c43      	adds	r3, r0, #1
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d004      	beq.n	80041b2 <__swbuf_r+0x5a>
 80041a8:	89a3      	ldrh	r3, [r4, #12]
 80041aa:	07db      	lsls	r3, r3, #31
 80041ac:	d506      	bpl.n	80041bc <__swbuf_r+0x64>
 80041ae:	2e0a      	cmp	r6, #10
 80041b0:	d104      	bne.n	80041bc <__swbuf_r+0x64>
 80041b2:	4621      	mov	r1, r4
 80041b4:	4628      	mov	r0, r5
 80041b6:	f7ff ffa7 	bl	8004108 <_fflush_r>
 80041ba:	b938      	cbnz	r0, 80041cc <__swbuf_r+0x74>
 80041bc:	4638      	mov	r0, r7
 80041be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041c0:	4621      	mov	r1, r4
 80041c2:	4628      	mov	r0, r5
 80041c4:	f000 f806 	bl	80041d4 <__swsetup_r>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d0d5      	beq.n	8004178 <__swbuf_r+0x20>
 80041cc:	f04f 37ff 	mov.w	r7, #4294967295
 80041d0:	e7f4      	b.n	80041bc <__swbuf_r+0x64>
	...

080041d4 <__swsetup_r>:
 80041d4:	b538      	push	{r3, r4, r5, lr}
 80041d6:	4b2a      	ldr	r3, [pc, #168]	; (8004280 <__swsetup_r+0xac>)
 80041d8:	4605      	mov	r5, r0
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	460c      	mov	r4, r1
 80041de:	b118      	cbz	r0, 80041e8 <__swsetup_r+0x14>
 80041e0:	6a03      	ldr	r3, [r0, #32]
 80041e2:	b90b      	cbnz	r3, 80041e8 <__swsetup_r+0x14>
 80041e4:	f7ff fa36 	bl	8003654 <__sinit>
 80041e8:	89a3      	ldrh	r3, [r4, #12]
 80041ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041ee:	0718      	lsls	r0, r3, #28
 80041f0:	d422      	bmi.n	8004238 <__swsetup_r+0x64>
 80041f2:	06d9      	lsls	r1, r3, #27
 80041f4:	d407      	bmi.n	8004206 <__swsetup_r+0x32>
 80041f6:	2309      	movs	r3, #9
 80041f8:	602b      	str	r3, [r5, #0]
 80041fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041fe:	81a3      	strh	r3, [r4, #12]
 8004200:	f04f 30ff 	mov.w	r0, #4294967295
 8004204:	e034      	b.n	8004270 <__swsetup_r+0x9c>
 8004206:	0758      	lsls	r0, r3, #29
 8004208:	d512      	bpl.n	8004230 <__swsetup_r+0x5c>
 800420a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800420c:	b141      	cbz	r1, 8004220 <__swsetup_r+0x4c>
 800420e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004212:	4299      	cmp	r1, r3
 8004214:	d002      	beq.n	800421c <__swsetup_r+0x48>
 8004216:	4628      	mov	r0, r5
 8004218:	f7ff fb24 	bl	8003864 <_free_r>
 800421c:	2300      	movs	r3, #0
 800421e:	6363      	str	r3, [r4, #52]	; 0x34
 8004220:	89a3      	ldrh	r3, [r4, #12]
 8004222:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004226:	81a3      	strh	r3, [r4, #12]
 8004228:	2300      	movs	r3, #0
 800422a:	6063      	str	r3, [r4, #4]
 800422c:	6923      	ldr	r3, [r4, #16]
 800422e:	6023      	str	r3, [r4, #0]
 8004230:	89a3      	ldrh	r3, [r4, #12]
 8004232:	f043 0308 	orr.w	r3, r3, #8
 8004236:	81a3      	strh	r3, [r4, #12]
 8004238:	6923      	ldr	r3, [r4, #16]
 800423a:	b94b      	cbnz	r3, 8004250 <__swsetup_r+0x7c>
 800423c:	89a3      	ldrh	r3, [r4, #12]
 800423e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004246:	d003      	beq.n	8004250 <__swsetup_r+0x7c>
 8004248:	4621      	mov	r1, r4
 800424a:	4628      	mov	r0, r5
 800424c:	f000 f850 	bl	80042f0 <__smakebuf_r>
 8004250:	89a0      	ldrh	r0, [r4, #12]
 8004252:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004256:	f010 0301 	ands.w	r3, r0, #1
 800425a:	d00a      	beq.n	8004272 <__swsetup_r+0x9e>
 800425c:	2300      	movs	r3, #0
 800425e:	60a3      	str	r3, [r4, #8]
 8004260:	6963      	ldr	r3, [r4, #20]
 8004262:	425b      	negs	r3, r3
 8004264:	61a3      	str	r3, [r4, #24]
 8004266:	6923      	ldr	r3, [r4, #16]
 8004268:	b943      	cbnz	r3, 800427c <__swsetup_r+0xa8>
 800426a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800426e:	d1c4      	bne.n	80041fa <__swsetup_r+0x26>
 8004270:	bd38      	pop	{r3, r4, r5, pc}
 8004272:	0781      	lsls	r1, r0, #30
 8004274:	bf58      	it	pl
 8004276:	6963      	ldrpl	r3, [r4, #20]
 8004278:	60a3      	str	r3, [r4, #8]
 800427a:	e7f4      	b.n	8004266 <__swsetup_r+0x92>
 800427c:	2000      	movs	r0, #0
 800427e:	e7f7      	b.n	8004270 <__swsetup_r+0x9c>
 8004280:	20000064 	.word	0x20000064

08004284 <_sbrk_r>:
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	4d06      	ldr	r5, [pc, #24]	; (80042a0 <_sbrk_r+0x1c>)
 8004288:	2300      	movs	r3, #0
 800428a:	4604      	mov	r4, r0
 800428c:	4608      	mov	r0, r1
 800428e:	602b      	str	r3, [r5, #0]
 8004290:	f7fc fce4 	bl	8000c5c <_sbrk>
 8004294:	1c43      	adds	r3, r0, #1
 8004296:	d102      	bne.n	800429e <_sbrk_r+0x1a>
 8004298:	682b      	ldr	r3, [r5, #0]
 800429a:	b103      	cbz	r3, 800429e <_sbrk_r+0x1a>
 800429c:	6023      	str	r3, [r4, #0]
 800429e:	bd38      	pop	{r3, r4, r5, pc}
 80042a0:	20000368 	.word	0x20000368

080042a4 <__swhatbuf_r>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	460c      	mov	r4, r1
 80042a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ac:	2900      	cmp	r1, #0
 80042ae:	b096      	sub	sp, #88	; 0x58
 80042b0:	4615      	mov	r5, r2
 80042b2:	461e      	mov	r6, r3
 80042b4:	da0d      	bge.n	80042d2 <__swhatbuf_r+0x2e>
 80042b6:	89a3      	ldrh	r3, [r4, #12]
 80042b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80042bc:	f04f 0100 	mov.w	r1, #0
 80042c0:	bf0c      	ite	eq
 80042c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80042c6:	2340      	movne	r3, #64	; 0x40
 80042c8:	2000      	movs	r0, #0
 80042ca:	6031      	str	r1, [r6, #0]
 80042cc:	602b      	str	r3, [r5, #0]
 80042ce:	b016      	add	sp, #88	; 0x58
 80042d0:	bd70      	pop	{r4, r5, r6, pc}
 80042d2:	466a      	mov	r2, sp
 80042d4:	f000 f848 	bl	8004368 <_fstat_r>
 80042d8:	2800      	cmp	r0, #0
 80042da:	dbec      	blt.n	80042b6 <__swhatbuf_r+0x12>
 80042dc:	9901      	ldr	r1, [sp, #4]
 80042de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80042e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80042e6:	4259      	negs	r1, r3
 80042e8:	4159      	adcs	r1, r3
 80042ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ee:	e7eb      	b.n	80042c8 <__swhatbuf_r+0x24>

080042f0 <__smakebuf_r>:
 80042f0:	898b      	ldrh	r3, [r1, #12]
 80042f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042f4:	079d      	lsls	r5, r3, #30
 80042f6:	4606      	mov	r6, r0
 80042f8:	460c      	mov	r4, r1
 80042fa:	d507      	bpl.n	800430c <__smakebuf_r+0x1c>
 80042fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004300:	6023      	str	r3, [r4, #0]
 8004302:	6123      	str	r3, [r4, #16]
 8004304:	2301      	movs	r3, #1
 8004306:	6163      	str	r3, [r4, #20]
 8004308:	b002      	add	sp, #8
 800430a:	bd70      	pop	{r4, r5, r6, pc}
 800430c:	ab01      	add	r3, sp, #4
 800430e:	466a      	mov	r2, sp
 8004310:	f7ff ffc8 	bl	80042a4 <__swhatbuf_r>
 8004314:	9900      	ldr	r1, [sp, #0]
 8004316:	4605      	mov	r5, r0
 8004318:	4630      	mov	r0, r6
 800431a:	f7ff fb0f 	bl	800393c <_malloc_r>
 800431e:	b948      	cbnz	r0, 8004334 <__smakebuf_r+0x44>
 8004320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004324:	059a      	lsls	r2, r3, #22
 8004326:	d4ef      	bmi.n	8004308 <__smakebuf_r+0x18>
 8004328:	f023 0303 	bic.w	r3, r3, #3
 800432c:	f043 0302 	orr.w	r3, r3, #2
 8004330:	81a3      	strh	r3, [r4, #12]
 8004332:	e7e3      	b.n	80042fc <__smakebuf_r+0xc>
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	6020      	str	r0, [r4, #0]
 8004338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800433c:	81a3      	strh	r3, [r4, #12]
 800433e:	9b00      	ldr	r3, [sp, #0]
 8004340:	6163      	str	r3, [r4, #20]
 8004342:	9b01      	ldr	r3, [sp, #4]
 8004344:	6120      	str	r0, [r4, #16]
 8004346:	b15b      	cbz	r3, 8004360 <__smakebuf_r+0x70>
 8004348:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800434c:	4630      	mov	r0, r6
 800434e:	f000 f81d 	bl	800438c <_isatty_r>
 8004352:	b128      	cbz	r0, 8004360 <__smakebuf_r+0x70>
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	81a3      	strh	r3, [r4, #12]
 8004360:	89a3      	ldrh	r3, [r4, #12]
 8004362:	431d      	orrs	r5, r3
 8004364:	81a5      	strh	r5, [r4, #12]
 8004366:	e7cf      	b.n	8004308 <__smakebuf_r+0x18>

08004368 <_fstat_r>:
 8004368:	b538      	push	{r3, r4, r5, lr}
 800436a:	4d07      	ldr	r5, [pc, #28]	; (8004388 <_fstat_r+0x20>)
 800436c:	2300      	movs	r3, #0
 800436e:	4604      	mov	r4, r0
 8004370:	4608      	mov	r0, r1
 8004372:	4611      	mov	r1, r2
 8004374:	602b      	str	r3, [r5, #0]
 8004376:	f7fc fc48 	bl	8000c0a <_fstat>
 800437a:	1c43      	adds	r3, r0, #1
 800437c:	d102      	bne.n	8004384 <_fstat_r+0x1c>
 800437e:	682b      	ldr	r3, [r5, #0]
 8004380:	b103      	cbz	r3, 8004384 <_fstat_r+0x1c>
 8004382:	6023      	str	r3, [r4, #0]
 8004384:	bd38      	pop	{r3, r4, r5, pc}
 8004386:	bf00      	nop
 8004388:	20000368 	.word	0x20000368

0800438c <_isatty_r>:
 800438c:	b538      	push	{r3, r4, r5, lr}
 800438e:	4d06      	ldr	r5, [pc, #24]	; (80043a8 <_isatty_r+0x1c>)
 8004390:	2300      	movs	r3, #0
 8004392:	4604      	mov	r4, r0
 8004394:	4608      	mov	r0, r1
 8004396:	602b      	str	r3, [r5, #0]
 8004398:	f7fc fc47 	bl	8000c2a <_isatty>
 800439c:	1c43      	adds	r3, r0, #1
 800439e:	d102      	bne.n	80043a6 <_isatty_r+0x1a>
 80043a0:	682b      	ldr	r3, [r5, #0]
 80043a2:	b103      	cbz	r3, 80043a6 <_isatty_r+0x1a>
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	bd38      	pop	{r3, r4, r5, pc}
 80043a8:	20000368 	.word	0x20000368

080043ac <_init>:
 80043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ae:	bf00      	nop
 80043b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b2:	bc08      	pop	{r3}
 80043b4:	469e      	mov	lr, r3
 80043b6:	4770      	bx	lr

080043b8 <_fini>:
 80043b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ba:	bf00      	nop
 80043bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043be:	bc08      	pop	{r3}
 80043c0:	469e      	mov	lr, r3
 80043c2:	4770      	bx	lr
